#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef CLOUDINARY_SWIFT_H
#define CLOUDINARY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Cloudinary",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSDate;
/// The CLDAccessControlRule class represents a single access control rule for upload/update API
SWIFT_CLASS("_TtC10Cloudinary20CLDAccessControlRule")
@interface CLDAccessControlRule : NSObject
/// Get a new instance of CLDAccessControlRule with token strategy
+ (CLDAccessControlRule * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
/// Get a new instance of CLDAccessControlRule with anonymous strategy
/// \param start The start date for the rule
///
+ (CLDAccessControlRule * _Nonnull)anonymousWithStart:(NSDate * _Nonnull)start SWIFT_WARN_UNUSED_RESULT;
/// Get a new instance of CLDAccessControlRule with anonymous strategy
/// \param end The end date for the rule
///
+ (CLDAccessControlRule * _Nonnull)anonymousWithEnd:(NSDate * _Nonnull)end SWIFT_WARN_UNUSED_RESULT;
/// Get a new instance of CLDAccessControlRule with anonymous strategy
/// \param start The start date for the rule
///
/// \param end The end date for the rule
///
+ (CLDAccessControlRule * _Nonnull)anonymousWithStart:(NSDate * _Nonnull)start end:(NSDate * _Nonnull)end SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
SWIFT_CLASS("_TtC10Cloudinary13CLDBaseResult")
@interface CLDBaseResult : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull resultJson;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CLDColorblindAccessibilityAnalysisResult;
SWIFT_CLASS("_TtC10Cloudinary30CLDAccessibilityAnalysisResult")
@interface CLDAccessibilityAnalysisResult : CLDBaseResult
@property (nonatomic, readonly, strong) CLDColorblindAccessibilityAnalysisResult * _Nullable colorblindAccessibilityAnalysis;
@end

@class CLDOcrDataResult;
SWIFT_CLASS("_TtC10Cloudinary15CLDAdvOcrResult")
@interface CLDAdvOcrResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable status;
@property (nonatomic, readonly, copy) NSArray<CLDOcrDataResult *> * _Nullable data;
@end

SWIFT_CLASS("_TtC10Cloudinary12CLDAnalytics")
@interface CLDAnalytics : NSObject
- (nonnull instancetype)initWithSdkVersion:(NSString * _Nullable)sdkVersion techVersion:(NSString * _Nullable)techVersion osType:(NSString * _Nullable)osType osVersion:(NSString * _Nullable)osVersion featureFlag:(NSString * _Nullable)featureFlag OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)generateAnalyticsSignatureWithSdkVersion:(NSString * _Nullable)sdkVersion techVersion:(NSString * _Nullable)techVersion osType:(NSString * _Nullable)osType osVersion:(NSString * _Nullable)osVersion featureFlag:(NSString * _Nullable)featureFlag SWIFT_WARN_UNUSED_RESULT;
- (void)setSDKVersionWithVersion:(NSString * _Nonnull)version;
- (void)setTechVersionWithVersion:(NSString * _Nonnull)version;
- (void)setOsVersionWithVersion:(NSString * _Nonnull)version;
- (void)setFeatureFlagWithFlag:(NSString * _Nullable)flag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC10Cloudinary8CLDAudio")
@interface CLDAudio : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable codec;
@property (nonatomic, readonly, copy) NSString * _Nullable channelLayout;
@end

SWIFT_CLASS("_TtC10Cloudinary20CLDBaseNetworkObject")
@interface CLDBaseNetworkObject : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC10Cloudinary14CLDBoundingBox")
@interface CLDBoundingBox : CLDBaseResult
@end

@class CLDConfiguration;
enum CLDLogLevel : NSInteger;
@protocol CLDNetworkAdapter;
@class NSURLSessionConfiguration;
@class CLDUrl;
@class CLDUploader;
@class CLDDownloader;
@class CLDManagementApi;
SWIFT_CLASS("_TtC10Cloudinary13CLDCloudinary")
@interface CLDCloudinary : NSObject
/// Holds the configuration parameters to be used by the <code>CLDCloudinary</code> instance.
@property (nonatomic, readonly, strong) CLDConfiguration * _Nonnull config;
/// Sets Cloudinary SDK’s log level, default level is set to <em>None</em>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum CLDLogLevel logLevel;)
+ (enum CLDLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum CLDLogLevel)newValue;
@property (nonatomic) BOOL enableUrlCache;
/// Sets Cloudinary SDK’s image cache maximum disk capacity.
/// default is 150 MB.
@property (nonatomic) NSInteger cacheMaxDiskCapacity;
/// Sets Cloudinary SDK’s image cache maximum memory total cost.
/// default is 30 MB.
@property (nonatomic) NSInteger cacheMaxMemoryTotalCost;
/// Initializes the <code>CLDCloudinary</code> instance with the specified configuration and network adapter.
/// \param configuration The configuration used by this CLDCloudinary instance.
///
/// \param networkAdapter A network adapter that implements <code>CLDNetworkAdapter</code>. CLDNetworkDelegate() by default.
///
///
/// returns:
/// The new <code>CLDCloudinary</code> instance.
- (nonnull instancetype)initWithConfiguration:(CLDConfiguration * _Nonnull)configuration networkAdapter:(id <CLDNetworkAdapter> _Nullable)networkAdapter sessionConfiguration:(NSURLSessionConfiguration * _Nullable)sessionConfiguration;
/// Initializes the <code>CLDCloudinary</code> instance with the specified configuration and network adapter.
/// \param configuration The configuration used by this CLDCloudinary instance.
///
/// \param networkAdapter A network adapter that implements <code>CLDNetworkAdapter</code>.
///
/// \param downloadAdapter A download adapter that implements <code>CLDNetworkAdapter</code>.
///
/// \param sessionConfiguration A session configuration that implements <code>URLSessionConfiguration</code>.
///
/// \param downloadSessionConfiguration A download session configuration that implements <code>URLSessionConfiguration</code>.
/// CLDNetworkDelegate() by default.
///
///
/// returns:
/// The new <code>CLDCloudinary</code> instance.
- (nonnull instancetype)initWithConfiguration:(CLDConfiguration * _Nonnull)configuration networkAdapter:(id <CLDNetworkAdapter> _Nullable)networkAdapter downloadAdapter:(id <CLDNetworkAdapter> _Nullable)downloadAdapter sessionConfiguration:(NSURLSessionConfiguration * _Nullable)sessionConfiguration downloadSessionConfiguration:(NSURLSessionConfiguration * _Nullable)downloadSessionConfiguration OBJC_DESIGNATED_INITIALIZER;
/// A factory method to create a new <code>CLDUrl</code> instance
///
/// returns:
/// A new <code>CLDUrl</code> instance.
- (CLDUrl * _Nonnull)createUrl SWIFT_WARN_UNUSED_RESULT;
/// A factory method to create a new <code>CLDUploader</code> instance
///
/// returns:
/// A new <code>CLDUploader</code> instance.
- (CLDUploader * _Nonnull)createUploader SWIFT_WARN_UNUSED_RESULT;
/// A factory method to create a new <code>CLDDownloader</code> instance
///
/// returns:
/// A new <code>CLDDownloader</code> instance.
- (CLDDownloader * _Nonnull)createDownloader SWIFT_WARN_UNUSED_RESULT;
/// A factory method to create a new <code>CLDAdminApi</code> instance
///
/// returns:
/// A new <code>CLDAdminApi</code> instance.
- (CLDManagementApi * _Nonnull)createManagementApi SWIFT_WARN_UNUSED_RESULT;
/// The maximum number of queued downloads that can execute at the same time.
/// default is NSOperationQueueDefaultMaxConcurrentOperationCount.
/// \param maxConcurrentDownloads The maximum concurrent downloads to allow.
///
- (void)setMaxConcurrentDownloads:(NSInteger)maxConcurrentDownloads SWIFT_AVAILABILITY(ios,introduced=8.0);
/// Set a completion handler provided by the UIApplicationDelegate <code>application:handleEventsForBackgroundURLSession:completionHandler:</code> method.
/// The handler will be called automatically once the session finishes its events for background URL session.
/// default is <code>nil</code>.
- (void)setBackgroundCompletionHandler:(void (^ _Nullable)(void))newValue SWIFT_AVAILABILITY(ios,introduced=8.0);
/// Sets the “USER-AGENT” HTTP header on all network requests to be <em>“PlatformName/ver CloudinaryiOS/ver”</em>
/// By default the header is set to <em>“CloudinaryiOS/ver”</em>
- (void)setUserPlatform:(NSString * _Nonnull)platformName version:(NSString * _Nonnull)version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC10Cloudinary40CLDColorblindAccessibilityAnalysisResult")
@interface CLDColorblindAccessibilityAnalysisResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable mostIndistinctPair;
@end

SWIFT_CLASS("_TtC10Cloudinary13CLDExpression")
@interface CLDExpression : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
+ (CLDExpression * _Nonnull)width SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)height SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)initialWidth SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)initialHeight SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)aspectRatio SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)initialAspectRatio SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)pageCount SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)faceCount SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)pageXOffset SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)pageYOffset SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)illustrationScore SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)currentPageIndex SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)duration SWIFT_WARN_UNUSED_RESULT;
+ (CLDExpression * _Nonnull)initialDuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)addByInt:(NSInteger)number;
- (nonnull instancetype)addByFloat:(float)number;
- (nonnull instancetype)addByString:(NSString * _Nonnull)number;
- (nonnull instancetype)subtractByInt:(NSInteger)number;
- (nonnull instancetype)subtractByFloat:(float)number;
- (nonnull instancetype)subtractByString:(NSString * _Nonnull)number;
- (nonnull instancetype)multipleByInt:(NSInteger)number;
- (nonnull instancetype)multipleByFloat:(float)number;
- (nonnull instancetype)multipleByString:(NSString * _Nonnull)number;
- (nonnull instancetype)divideByInt:(NSInteger)number;
- (nonnull instancetype)divideByFloat:(float)number;
- (nonnull instancetype)divideByString:(NSString * _Nonnull)number;
- (nonnull instancetype)powerByInt:(NSInteger)number;
- (nonnull instancetype)powerByFloat:(float)number;
- (nonnull instancetype)powerByString:(NSString * _Nonnull)number;
- (NSString * _Nonnull)asString SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nonnull)asParams SWIFT_WARN_UNUSED_RESULT;
@end

@class CLDTransformation;
SWIFT_CLASS("_TtC10Cloudinary22CLDConditionExpression")
@interface CLDConditionExpression : CLDExpression
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)and;
- (nonnull instancetype)andString:(NSString * _Nonnull)value;
- (nonnull instancetype)andExpression:(CLDExpression * _Nonnull)value;
- (nonnull instancetype)or;
- (nonnull instancetype)orString:(NSString * _Nonnull)value;
- (nonnull instancetype)orExpression:(CLDExpression * _Nonnull)value;
- (nonnull instancetype)equalToInt:(NSInteger)value;
- (nonnull instancetype)equalToFloat:(float)value;
- (nonnull instancetype)equalToString:(NSString * _Nonnull)value;
- (nonnull instancetype)equalToExpression:(CLDExpression * _Nonnull)value;
- (nonnull instancetype)notEqualToInt:(NSInteger)value;
- (nonnull instancetype)notEqualToFloat:(float)value;
- (nonnull instancetype)notEqualToString:(NSString * _Nonnull)value;
- (nonnull instancetype)notEqualToExpression:(CLDExpression * _Nonnull)value;
- (nonnull instancetype)lessThenInt:(NSInteger)value;
- (nonnull instancetype)lessThenFloat:(float)value;
- (nonnull instancetype)lessThenString:(NSString * _Nonnull)value;
- (nonnull instancetype)lessThenExpression:(CLDExpression * _Nonnull)value;
- (nonnull instancetype)greaterThenInt:(NSInteger)value;
- (nonnull instancetype)greaterThenFloat:(float)value;
- (nonnull instancetype)greaterThenString:(NSString * _Nonnull)value;
- (nonnull instancetype)greaterThenExpression:(CLDExpression * _Nonnull)value;
- (nonnull instancetype)lessOrEqualToInt:(NSInteger)value;
- (nonnull instancetype)lessOrEqualToFloat:(float)value;
- (nonnull instancetype)lessOrEqualToString:(NSString * _Nonnull)value;
- (nonnull instancetype)lessOrEqualToExpression:(CLDExpression * _Nonnull)value;
- (nonnull instancetype)greaterOrEqualToInt:(NSInteger)value;
- (nonnull instancetype)greaterOrEqualToFloat:(float)value;
- (nonnull instancetype)greaterOrEqualToString:(NSString * _Nonnull)value;
- (nonnull instancetype)greaterOrEqualToExpression:(CLDExpression * _Nonnull)value;
- (nonnull instancetype)insideString:(NSString * _Nonnull)expression;
- (nonnull instancetype)insideExpression:(CLDExpression * _Nonnull)expression;
- (nonnull instancetype)notInsideString:(NSString * _Nonnull)expression;
- (nonnull instancetype)notInsideExpression:(CLDExpression * _Nonnull)expression;
- (nonnull instancetype)valueFromString:(NSString * _Nonnull)expression;
- (nonnull instancetype)valueFromExpression:(CLDExpression * _Nonnull)expression;
- (CLDTransformation * _Nonnull)then SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)width SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)height SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)aspectRatio SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initialWidth SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initialHeight SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initialAspectRatio SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)pageCount SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)faceCount SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)tags SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)pageXOffset SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)pageYOffset SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)illustrationScore SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)currentPageIndex SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)duration SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initialDuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)width:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)width:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)width:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)width:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)width:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)height:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)height:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)height:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)height:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)height:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)aspectRatio:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)aspectRatio:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)aspectRatio:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)aspectRatio:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)aspectRatio:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)initialWidth:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)initialWidth:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)initialWidth:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)initialWidth:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)initialWidth:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)initialHeight:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)initialHeight:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)initialHeight:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)initialHeight:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)initialHeight:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)initialAspectRatio:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)initialAspectRatio:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)initialAspectRatio:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)initialAspectRatio:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)initialAspectRatio:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)pageCount:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)pageCount:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)pageCount:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)pageCount:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)pageCount:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)faceCount:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)faceCount:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)faceCount:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)faceCount:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)faceCount:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)tags:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)tags:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)tags:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)tags:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)tags:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)pageXOffset:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)pageXOffset:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)pageXOffset:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)pageXOffset:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)pageXOffset:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)pageYOffset:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)pageYOffset:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)pageYOffset:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)pageYOffset:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)pageYOffset:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)illustrationScore:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)illustrationScore:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)illustrationScore:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)illustrationScore:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)illustrationScore:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)currentPageIndex:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)currentPageIndex:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)currentPageIndex:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)currentPageIndex:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)currentPageIndex:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)duration:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)duration:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)duration:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)duration:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)duration:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
- (nonnull instancetype)initialDuration:(NSString * _Nonnull)operatorString intValue:(NSInteger)object;
- (nonnull instancetype)initialDuration:(NSString * _Nonnull)operatorString floatValue:(float)object;
- (nonnull instancetype)initialDuration:(NSString * _Nonnull)operatorString string:(NSString * _Nonnull)object;
- (nonnull instancetype)initialDuration:(NSString * _Nonnull)operatorString expression:(CLDExpression * _Nonnull)object;
- (nonnull instancetype)initialDuration:(NSString * _Nonnull)operatorString conditionExpression:(CLDConditionExpression * _Nonnull)object;
@end

enum SignatureAlgorithm : NSInteger;
@class NSNumber;
/// The CLDConfiguration class holds the configuration parameters to be used by the <code>CLDCloudinary</code> instance.
SWIFT_CLASS("_TtC10Cloudinary16CLDConfiguration")
@interface CLDConfiguration : NSObject
/// Your account’s cloud name on Cloudinary.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified cloudName;
/// Your account’s API key, can be found in your account’s dashboard on Cloudinary as part of the account details.
@property (nonatomic, readonly, copy) NSString * _Nullable apiKey;
/// Your account’s API secret, can be found in your account’s dashboard on Cloudinary as part of the account details.
@property (nonatomic, readonly, copy) NSString * _Nullable apiSecret;
/// A boolean value specifying whether or not to use a private CDN. false by default.
@property (nonatomic, readonly) BOOL privateCdn;
/// A boolean value specifying whether or not to use a secure CDN connection. false by default.
@property (nonatomic, readonly) BOOL secure;
/// A boolean value specifying whether or not to use a CDN subdomain. false by default.
@property (nonatomic, readonly) BOOL cdnSubdomain;
/// A boolean value specifying whether or not to use a secure connection with a CDN subdomain. false by default.
@property (nonatomic, readonly) BOOL secureCdnSubdomain;
/// A boolean value specifying whether or not to use long encryption. false by default.
@property (nonatomic, readonly) BOOL longUrlSignature;
/// An enum value specifying the desired hash algorithm. sha1 by default.
@property (nonatomic, readonly) enum SignatureAlgorithm signatureAlgorithm;
/// Your secure distribution domain to be set when using a secure distribution (advanced plan only). nil by default.
@property (nonatomic, readonly, copy) NSString * _Nullable secureDistribution;
/// Your custom domain. nil by default.
@property (nonatomic, readonly, copy) NSString * _Nullable cname;
/// A custom upload prefix to be used instead of Cloudinary’s default API prefix. nil by default.
@property (nonatomic, readonly, copy) NSString * _Nullable uploadPrefix;
/// A custom timeout in milliseconds to be used instead of Cloudinary’s default timeout. nil by default.
@property (nonatomic, readonly, strong) NSNumber * _Nullable timeout;
/// A boolean value specifying whether or not to use analytics. true by default.
@property (nonatomic) BOOL analytics;
/// An analytics object
@property (nonatomic, strong) CLDAnalytics * _Nonnull analyticsObject;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes a CLDConfiguration instance, using the URL specified in the environment parameters under <code>CLOUDINARY_URL</code>.
/// The URL should be in this form: <code>cloudinary://<API_KEY>:<API_SECRET>@<CLOUD_NAME></code>.
/// Extra parameters may be added to the url: <code>secure</code> (boolean), <code>cdn_subdomain</code> (boolean), <code>secure_cdn_distribution</code> (boolean), <code>long_url_signature</code>(boolean), <code>cname</code>, <code>upload_prefix</code>, <code>signature_algorithm</code>
///
/// returns:
/// A new <code>CLDConfiguration</code> instance if the environment parameter URL exists and is valid, otherwise returns nil.
+ (CLDConfiguration * _Nullable)initWithEnvParams SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithOptions:(NSDictionary<NSString *, id> * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDConfiguration instance with the specified parameters.
/// \param cloudName Your account’s cloud name on Cloudinary.
///
/// \param apiKey Your account’s API key, can be found in your account’s dashboard on Cloudinary as part of the account details.
///
/// \param apiSecret Your account’s API secret, can be found in your account’s dashboard on Cloudinary as part of the account details.
///
/// \param privateCdn A boolean value specifying whether or not to use a private CDN. false by default.
///
/// \param secure A boolean value specifying whether or not to use a secure CDN connection. false by default.
///
/// \param cdnSubdomain A boolean value specifying whether or not to use a CDN subdomain. false by default.
///
/// \param secureCdnSubdomain A boolean value specifying whether or not to use a secure connection with a CDN subdomain. false by default.
///
/// \param longUrlSignature A boolean value specifying whether or not to use long encryption. false by default.
///
/// \param signatureAlgorithm An enum value specifying the desired hash algorithm. sha1 by default.
///
/// \param secureDistribution Set your secure distribution domain to be set when using a secure distribution (advanced plan only). nil by default.
///
/// \param cname Set your custom domain. nil by default.
///
/// \param uploadPrefix Set a custom upload prefix to be used instead of Cloudinary’s default API prefix. nil by default.
///
/// \param timeout A custom timeout in milliseconds to be used instead of Cloudinary’s default timeout. nil by default.
///
///
/// returns:
/// A new <code>CLDConfiguration</code> instance.
- (nonnull instancetype)initWithCloudName:(NSString * _Nonnull)cloudName apiKey:(NSString * _Nullable)apiKey apiSecret:(NSString * _Nullable)apiSecret privateCdn:(BOOL)privateCdn secure:(BOOL)secure cdnSubdomain:(BOOL)cdnSubdomain secureCdnSubdomain:(BOOL)secureCdnSubdomain longUrlSignature:(BOOL)longUrlSignature signatureAlgorithm:(enum SignatureAlgorithm)signatureAlgorithm secureDistribution:(NSString * _Nullable)secureDistribution cname:(NSString * _Nullable)cname uploadPrefix:(NSString * _Nullable)uploadPrefix timeout:(NSNumber * _Nullable)timeout analytics:(BOOL)analytics OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDConfiguration instance, using a given URL.
/// The URL should be in this form: <code>cloudinary://<API_KEY>:<API_SECRET>@<CLOUD_NAME></code>.
/// Extra parameters may be added to the url: <code>secure</code> (boolean), <code>cdn_subdomain</code> (boolean), <code>secure_cdn_distribution</code> (boolean), <code>long_url_signature</code>(boolean), <code>cname</code>, <code>upload_prefix</code>, <code>signature_algorithm</code>
///
/// returns:
/// A new <code>CLDConfiguration</code> instance if the URL is valid, otherwise returns nil.
- (nullable instancetype)initWithCloudinaryUrl:(NSString * _Nonnull)cloudinaryUrl OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SignatureAlgorithm, closed) {
  SignatureAlgorithmSha1 = 0,
  SignatureAlgorithmSha256 = 1,
};

/// The CLDCoordinate class represents a rectangle area on an asset.
SWIFT_CLASS("_TtC10Cloudinary13CLDCoordinate")
@interface CLDCoordinate : NSObject
/// Initializes the CLDCoordinate using a CGRect.
/// \param rect The rectangle representing an area on the asset.
///
///
/// returns:
/// A new CLDCoordinate instance.
- (nonnull instancetype)initWithRect:(CGRect)rect OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC10Cloudinary14CLDCoordinates")
@interface CLDCoordinates : CLDBaseResult
@property (nonatomic, readonly, strong) id _Nullable custom;
@property (nonatomic, readonly, strong) id _Nullable faces;
@end

@class UIColor;
@class NSCoder;
SWIFT_CLASS("_TtC10Cloudinary18CLDCropOverlayView")
@interface CLDCropOverlayView : UIView
@property (nonatomic) CGRect frame;
@property (nonatomic, strong) UIColor * _Nonnull gridColor;
@property (nonatomic, strong) UIColor * _Nonnull knobColor;
/// Hides the interior grid lines, sans animation.
@property (nonatomic) BOOL isGridHidden;
/// Add/Remove the interior horizontal grid lines.
@property (nonatomic) BOOL shouldDisplayHorizontalGridLines;
/// Add/Remove the interior vertical grid lines.
@property (nonatomic) BOOL shouldDisplayVerticalGridLines;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)didMoveToSuperview;
/// Shows and hides the interior grid lines with an optional crossfade animation.
- (void)setGridlinesWithHidden:(BOOL)hidden animted:(BOOL)animted;
@end

@class UITouch;
@class UIEvent;
SWIFT_CLASS("_TtC10Cloudinary17CLDCropScrollView")
@interface CLDCropScrollView : UIScrollView
@property (nonatomic, copy) void (^ _Nullable touchesBegan)(void);
@property (nonatomic, copy) void (^ _Nullable touchesCancelled)(void);
@property (nonatomic, copy) void (^ _Nullable touchesEnded)(void);
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end

@protocol CLDCropViewDelegate;
@class UIImage;
SWIFT_CLASS("_TtC10Cloudinary11CLDCropView")
@interface CLDCropView : UIView
/// A delegate object that receives notifications from the crop view
@property (nonatomic, weak) id <CLDCropViewDelegate> _Nullable delegate;
/// If false, the user cannot resize the crop box frame using a pan gesture from a corner.
/// Default value is true.
@property (nonatomic) BOOL cropBoxResizeEnabled;
/// Inset the workable region of the crop view in case in order to make space for accessory views
@property (nonatomic) UIEdgeInsets cropRegionInsets;
/// When performing manual content layout (such as during screen rotation), disable any internal layout
@property (nonatomic) BOOL internalLayoutDisabled;
/// A width x height ratio that the crop box will be rescaled to (eg 4:3 is {4.0f, 3.0f})
/// Setting it to CGSizeZero will reset the aspect ratio to the image’s own ratio.
@property (nonatomic) CGSize aspectRatio;
/// When the cropping box is locked to its current aspect ratio (But can still be resized)
@property (nonatomic) BOOL aspectRatioLockEnabled;
/// If true, a custom aspect ratio is set, and the aspectRatioLockEnabled is set to YES,
/// the crop box will swap it’s dimensions depending on portrait or landscape sized images.
/// This value also controls whether the dimensions can swap when the image is rotated.
/// Default is true.
@property (nonatomic) BOOL aspectRatioLockDimensionSwapEnabled;
/// When the user taps ‘reset’, whether the aspect ratio will also be reset as well
/// Default is true.
@property (nonatomic) BOOL resetAspectRatioEnabled;
/// The rotation angle of the crop view (Will always be negative as it rotates in a counter-clockwise direction)
@property (nonatomic) NSInteger angle;
/// In relation to the coordinate space of the image, the frame that the crop view is focusing on
@property (nonatomic) CGRect imageCropFrame;
/// Paddings of the crop rectangle.
/// Default to 14.0
@property (nonatomic) CGFloat cropViewPadding;
/// Delay before crop frame is adjusted according new crop area.
/// Default to 0.8
@property (nonatomic) NSTimeInterval cropAdjustingDelay;
/// The minimum croping aspect ratio. If set, user is prevented from setting cropping
/// rectangle to lower aspect ratio than defined by the parameter.
@property (nonatomic) CGFloat minimumAspectRatio;
/// The maximum scale that user can apply to image by pinching to zoom. Small values
/// are only recomended with aspectRatioLockEnabled set to true.
/// Default to 15.0
@property (nonatomic) CGFloat maximumZoomScale;
/// Always show the cropping grid lines, even when the user isn’t interacting.
/// This also disables the fading animation.
/// (Default is NO)
@property (nonatomic) BOOL alwaysShowCroppingGrid;
/// Permanently hides the translucency effect covering the outside bounds of the
/// crop box.
/// Default is NO
@property (nonatomic) BOOL translucencyAlwaysHidden;
/// The image that the crop view is displaying. This cannot be changed once the crop view is instantiated.
@property (nonatomic, readonly, strong) UIImage * _Nonnull image;
/// A container view that clips the a copy of the image so it appears over the dimming view
@property (nonatomic, readonly, strong) UIView * _Null_unspecified foregroundContainerView;
/// A grid view overlaid on top of the foreground image view’s container.
@property (nonatomic, readonly, strong) CLDCropOverlayView * _Null_unspecified gridOverlayView;
/// The frame of the cropping box in the coordinate space of the crop view
@property (nonatomic, readonly) CGRect cropBoxFrame;
/// Whether the user has manipulated the crop view to the point where it can be reset
@property (nonatomic, readonly) BOOL isResettable;
/// In iOS 9, a new dynamic blur effect became available.
@property (nonatomic, readonly) BOOL dynamicBlurEffect;
/// Create a new instance of the crop view with the specified image and cropping
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Performs the initial set up, including laying out the image and applying any restore properties.
/// This should be called once the crop view has been added to a parent that is in its final layout frame.
- (void)performInitialSetup;
/// Changes the aspect ratio of the crop box to match the one specified
/// \param aspectRatio The aspect ratio (For example 16 9 is 16.0f/9.0f). ‘CGSizeZero’ will reset it to the image’s own ratio
///
/// \param animated Whether the locking effect is animated 
///
- (void)setAspectRatio:(CGSize)newValue animated:(BOOL)animated;
- (void)lockAspectRatioTo:(CGSize)aspectRatio;
/// Rotates the entire canvas to a 90-degree angle. The default rotation is counterclockwise.
/// \param animated Whether the transition is animated 
///
- (void)rotateImageNinetyDegreesAnimated:(BOOL)animated;
/// Rotates the entire canvas to a 90-degree angle
/// \param animated Whether the transition is animated 
///
/// \param clockwise Whether the rotation is clockwise. Passing ‘NO’ means counterclockwise 
///
- (void)rotateImageNinetyDegreesAnimated:(BOOL)animated clockwise:(BOOL)clockwise;
/// When triggered, the crop view will perform a relayout to ensure the crop box
/// fills the entire crop view region
- (void)moveCroppedContentToCenterAnimated:(BOOL)animated;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@interface CLDCropView (SWIFT_EXTENSION(Cloudinary)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end

/// Preset values of the most common aspect ratios that can be used to quickly configure
/// the crop view controller.
typedef SWIFT_ENUM(NSInteger, CLDCropViewControllerAspectRatioPreset, closed) {
  CLDCropViewControllerAspectRatioPresetOriginal = 0,
  CLDCropViewControllerAspectRatioPresetSquare = 1,
  CLDCropViewControllerAspectRatioPresetRect3x2 = 2,
  CLDCropViewControllerAspectRatioPresetRect5x3 = 3,
  CLDCropViewControllerAspectRatioPresetRect4x3 = 4,
  CLDCropViewControllerAspectRatioPresetRect5x4 = 5,
  CLDCropViewControllerAspectRatioPresetRect7x5 = 6,
  CLDCropViewControllerAspectRatioPresetRect16x9 = 7,
  CLDCropViewControllerAspectRatioPresetCustom = 8,
};

SWIFT_PROTOCOL("_TtP10Cloudinary19CLDCropViewDelegate_")
@protocol CLDCropViewDelegate <NSObject>
@optional
- (void)cropView:(CLDCropView * _Nonnull)cropView didChangeResettable:(BOOL)state;
@end

/// When the user taps down to resize the box, this state is used
/// to determine where they tapped and how to manipulate the box
typedef SWIFT_ENUM(NSInteger, CLDCropViewOverlayEdge, closed) {
  CLDCropViewOverlayEdgeNone = 0,
  CLDCropViewOverlayEdgeTopLeft = 1,
  CLDCropViewOverlayEdgeTop = 2,
  CLDCropViewOverlayEdgeTopRight = 3,
  CLDCropViewOverlayEdgeRight = 4,
  CLDCropViewOverlayEdgeBottomRight = 5,
  CLDCropViewOverlayEdgeBottom = 6,
  CLDCropViewOverlayEdgeBottomLeft = 7,
  CLDCropViewOverlayEdgeLeft = 8,
};

enum CLDUrlResourceType : NSInteger;
@class CLDSignature;
/// The CLDRequestParams class is a base class for all different request params object.
/// It holds a dictionary of the actual params, the request’s resource type, the request signature for signing a request using an externaly generated signature, and the subclass’ representing action.
SWIFT_CLASS("_TtC10Cloudinary16CLDRequestParams")
@interface CLDRequestParams : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// A generic setter to manualy set a param.
/// \param key The key of parameter to set.
///
/// \param value The parameter value.
///
///
/// returns:
/// The same instance of CLDRequestParams.
- (nonnull instancetype)setParam:(NSString * _Nonnull)key value:(id _Nullable)value;
- (nonnull instancetype)setResourceTypeFromUrlResourceType:(enum CLDUrlResourceType)resourceType;
- (nonnull instancetype)setResourceTypeFromString:(NSString * _Nonnull)resourceType;
- (nonnull instancetype)setSignatureWithSignature:(CLDSignature * _Nonnull)signature;
- (nonnull instancetype)setApiKeyWithKey:(NSString * _Nonnull)apiKey;
/// A generic getter to retrieve a param for a given key.
/// \param key The key of the parameter to retrieve.
///
///
/// returns:
/// The same instance of CLDRequestParams.
- (id _Nullable)getParam:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

/// This class represents the different parameters that can be passed when performing a <code>delete by token</code> request.
SWIFT_CLASS("_TtC10Cloudinary29CLDDeleteByTokenRequestParams")
@interface CLDDeleteByTokenRequestParams : CLDRequestParams
/// Initializes a CLDDeleteByTokenRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDDeleteByTokenRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;
/// The <code>CLDRequest</code> object is returned when creating a network request using one of Cloudinary’s API calls.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary10CLDRequest")
@interface CLDRequest : NSObject
/// Resume the request.
- (void)resume;
/// Suspend the request.
- (void)suspend;
/// Cancel the request.
- (void)cancel;
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDRequest.
- (CLDRequest * _Nonnull)responseRaw:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CLDDeleteResult;
/// The <code>CLDExplodeRequest</code> object is returned when creating an explode request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary16CLDDeleteRequest")
@interface CLDDeleteRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDDeleteRequest.
- (CLDDeleteRequest * _Nonnull)response:(void (^ _Nullable)(CLDDeleteResult * _Nullable, NSError * _Nullable))completionHandler;
@end

SWIFT_CLASS("_TtC10Cloudinary15CLDDeleteResult")
@interface CLDDeleteResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable result;
@end

SWIFT_CLASS("_TtC10Cloudinary10CLDDerived")
@interface CLDDerived : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable transformation;
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@end

enum CLDType : NSInteger;
/// This class represents the different parameters that can be passed when performing a destroy request.
SWIFT_CLASS("_TtC10Cloudinary23CLDDestroyRequestParams")
@interface CLDDestroyRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDDestroyRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDDestroyRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set the specific file type of the resource using one of the available options from CLDType.
/// \param type The file type to set.
///
///
/// returns:
/// The same instance of CLDDestroyRequestParams.
- (nonnull instancetype)setTypeWithType:(enum CLDType)type;
/// Set the specific file type of the resource.
/// \param type The specific file type of the resource.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setType:(NSString * _Nonnull)type;
/// Set boolean parameter indicating whether or not the asset should be invalidated through the CDN. default is false.
/// \param invalidate The boolean parameter.
///
///
/// returns:
/// The same instance of CLDDestroyRequestParams.
- (nonnull instancetype)setInvalidate:(BOOL)invalidate;
@end

@class CLDRekognitionFace;
SWIFT_CLASS("_TtC10Cloudinary12CLDDetection")
@interface CLDDetection : CLDBaseResult
@property (nonatomic, readonly, strong) CLDRekognitionFace * _Nullable rekognitionFace;
@end

/// The CLDDownloader class is used to asynchronously fetch images either from the image cache if they exist or download them from a remote source.
SWIFT_CLASS("_TtC10Cloudinary13CLDDownloader")
@interface CLDDownloader : CLDBaseNetworkObject
@end

@class NSProgress;
@protocol CLDFetchImageRequest;
@class NSData;
@protocol CLDFetchAssetRequest;
@interface CLDDownloader (SWIFT_EXTENSION(Cloudinary))
/// Asynchronously fetches a remote image from the specified URL.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// //TODO: REMOVE!!!
/// \param url The image URL to download.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the retrieved UIImage or the error.
///
///
/// returns:
/// A <code>CLDFetchImageRequest</code> instance to be used to get the fetched image from, or to get the download progress or cancel the task.
- (id <CLDFetchImageRequest> _Nonnull)fetchImage:(NSString * _Nonnull)url :(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completionHandler;
/// Asynchronously fetches a remote asset from the specified URL.
/// The asset is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param url The asset URL to download.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the retrieved Data or an error.
///
///
/// returns:
/// A <code>CLDFetchAssetRequest</code> instance to be used to get the fetched image from, or to get the download progress or cancel the task.
- (id <CLDFetchAssetRequest> _Nonnull)fetchAsset:(NSString * _Nonnull)url :(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(NSData * _Nullable, NSError * _Nullable))completionHandler;
@end

SWIFT_CLASS("_TtC10Cloudinary14CLDEagerResult")
@interface CLDEagerResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@end

@class CLDVariable;
enum CLDCrop : NSInteger;
enum CLDEffect : NSInteger;
enum CLDArtFilters : NSInteger;
@class CLDQuality;
enum CLDGravity : NSInteger;
@class CLDCustomFunction;
@class CLDFps;
@class CLDLayer;
/// The CLDTransformation class represents a full transformation performed by Cloudinay on-the-fly on a certain asset.
SWIFT_CLASS("_TtC10Cloudinary17CLDTransformation")
@interface CLDTransformation : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithInput:(NSArray<CLDTransformation *> * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nullable width;
@property (nonatomic, readonly, copy) NSString * _Nullable height;
@property (nonatomic, readonly, copy) NSString * _Nullable named;
@property (nonatomic, readonly, copy) NSString * _Nullable crop;
@property (nonatomic, readonly, copy) NSString * _Nullable background;
@property (nonatomic, readonly, copy) NSString * _Nullable color;
@property (nonatomic, readonly, copy) NSString * _Nullable effect;
@property (nonatomic, readonly, copy) NSString * _Nullable angle;
@property (nonatomic, readonly, copy) NSString * _Nullable opacity;
@property (nonatomic, readonly, copy) NSString * _Nullable border;
@property (nonatomic, readonly, copy) NSString * _Nullable x;
@property (nonatomic, readonly, copy) NSString * _Nullable y;
@property (nonatomic, readonly, copy) NSString * _Nullable radius;
@property (nonatomic, readonly, copy) NSString * _Nullable quality;
@property (nonatomic, readonly, copy) NSString * _Nullable defaultImage;
@property (nonatomic, readonly, copy) NSString * _Nullable gravity;
@property (nonatomic, readonly, copy) NSString * _Nullable colorSpace;
@property (nonatomic, readonly, copy) NSString * _Nullable prefix;
@property (nonatomic, readonly, copy) NSString * _Nullable overlay;
@property (nonatomic, readonly, copy) NSString * _Nullable underlay;
@property (nonatomic, readonly, copy) NSString * _Nullable fetchFormat;
@property (nonatomic, readonly, copy) NSString * _Nullable density;
@property (nonatomic, readonly, copy) NSString * _Nullable page;
@property (nonatomic, readonly, copy) NSString * _Nullable delay;
@property (nonatomic, readonly, copy) NSString * _Nullable rawTransformation;
@property (nonatomic, readonly, copy) NSString * _Nullable variables;
@property (nonatomic, readonly, copy) NSString * _Nullable ifParam;
@property (nonatomic, readonly, copy) NSString * _Nullable flags;
@property (nonatomic, readonly, copy) NSString * _Nullable dpr;
@property (nonatomic, readonly, copy) NSString * _Nullable zoom;
@property (nonatomic, readonly, copy) NSString * _Nullable aspectRatio;
@property (nonatomic, readonly, copy) NSString * _Nullable customPreFunction;
@property (nonatomic, readonly, copy) NSString * _Nullable customFunction;
@property (nonatomic, readonly, copy) NSString * _Nullable audioCodec;
@property (nonatomic, readonly, copy) NSString * _Nullable audioFrequency;
@property (nonatomic, readonly, copy) NSString * _Nullable bitRate;
@property (nonatomic, readonly, copy) NSString * _Nullable videoSampling;
@property (nonatomic, readonly, copy) NSString * _Nullable duration;
@property (nonatomic, readonly, copy) NSString * _Nullable startOffset;
@property (nonatomic, readonly, copy) NSString * _Nullable endOffset;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable offset;
@property (nonatomic, readonly, copy) NSString * _Nullable videoCodec;
@property (nonatomic, readonly, copy) NSString * _Nullable fps;
@property (nonatomic, readonly, copy) NSString * _Nullable keyframeInterval;
@property (nonatomic, readonly, copy) NSString * _Nullable streamingProfile;
- (NSString * _Nullable)getParam:(NSString * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
/// Set a variable.
/// \param name The variable’s name.
///
/// \param value The variable’s value.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVariable:(NSString * _Nonnull)name intValue:(NSInteger)value;
/// Set a variable.
/// \param name The variable’s name.
///
/// \param value The variable’s value.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVariable:(NSString * _Nonnull)name floatValue:(float)value;
/// Set a variable.
/// \param name The variable’s name.
///
/// \param value The variable’s value.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVariable:(NSString * _Nonnull)name string:(NSString * _Nonnull)value;
/// Set a variable.
/// \param name The variable’s name.
///
/// \param values The variable’s value.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVariable:(NSString * _Nonnull)name valuesArray:(NSArray<NSString *> * _Nonnull)values;
/// Set a variable.
/// \param variable The variable to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVariableWithVariable:(CLDVariable * _Nonnull)variable;
/// Set an array of variables.
/// \param variables The variables to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVariablesWithVariablesArray:(NSArray<CLDVariable *> * _Nonnull)variables;
/// Set the image width.
/// \param width The width to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setWidthWithInt:(NSInteger)width;
/// Set the image width.
/// \param width The width to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setWidthWithFloat:(float)width;
/// Set the image width.
/// \param width The width to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setWidth:(NSString * _Nonnull)width;
/// Set the image height.
/// \param height The height to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setHeightWithInt:(NSInteger)height;
/// Set the image height.
/// \param height The height to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setHeightWithFloat:(float)height;
/// Set the image height.
/// \param height The height to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setHeight:(NSString * _Nonnull)height;
/// A named transformation is a set of image transformations that has been given a custom name for easy reference.
/// It is useful to define a named transformation when you have a set of relatively complex transformations that you use often and that you want to easily reference.
/// \param names The names of the transformations to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setNamedWithArray:(NSArray<NSString *> * _Nonnull)names;
/// A named transformation is a set of image transformations that has been given a custom name for easy reference.
/// It is useful to define a named transformation when you have a set of relatively complex transformations that you use often and that you want to easily reference.
/// \param names The names of the transformations to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setNamed:(NSString * _Nonnull)names;
/// Set the image crop.
/// \param crop The crop to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setCropWithCrop:(enum CLDCrop)crop;
/// Set the image crop.
/// \param crop The crop to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setCrop:(NSString * _Nonnull)crop;
/// Defines the background color to use instead of transparent background areas when converting to JPG format or using the pad crop mode.
/// The background color can be set as an RGB hex triplet (e.g. ‘#3e2222’), a 3 character RGB hex (e.g. ‘#777’) or a named color (e.g. ‘green’).
/// \param background The background color to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setBackground:(NSString * _Nonnull)background;
/// Customize the color to use together with: text captions, the shadow effect and the colorize effect.
/// The color can be set as an RGB hex triplet (e.g. ‘#3e2222’), a 3 character RGB hex (e.g. ‘#777’) or a named color (e.g. ‘green’).
/// \param color The color to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setColor:(NSString * _Nonnull)color;
/// Apply a filter or an effect on an image.
/// \param effect The effect to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setEffectWithEffect:(enum CLDEffect)effect;
/// Apply a filter or an effect on an image.
/// The value includes the name of the effect and an additional parameter that controls the behavior of the specific effect.
/// \param effect The effect to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setEffectWithArtFilter:(enum CLDArtFilters)effect;
/// Apply a filter or an effect on an image.
/// The value includes the name of the effect and an additional parameter that controls the behavior of the specific effect.
/// \param effect The effect to apply.
///
/// \param param The effect value to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setEffectWithEffect:(enum CLDEffect)effect param:(NSString * _Nonnull)param;
/// Apply a filter or an effect on an image.
/// The value includes the name of the effect and an additional parameter that controls the behavior of the specific effect.
/// \param effect The effect to apply.
///
/// \param param The effect value to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setEffect:(NSString * _Nonnull)effect param:(NSString * _Nonnull)param;
/// Apply a filter or an effect on an image.
/// \param effect The effect to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setEffect:(NSString * _Nonnull)effect;
/// Rotate or flip an image by the given degrees or automatically according to its orientation or available meta-data.
/// \param angle The angle to rotate.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setAngleWithInt:(NSInteger)angle;
/// Rotate or flip an image by the given degrees or automatically according to its orientation or available meta-data.
/// \param angles The angles to rotate.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setAngleWithArray:(NSArray<NSString *> * _Nonnull)angles;
/// Rotate or flip an image by the given degrees or automatically according to its orientation or available meta-data.
/// \param angle The angle to rotate.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setAngle:(NSString * _Nonnull)angle;
/// Adjust the opacity of the image and make it semi-transparent. 100 means opaque, while 0 is completely transparent.
/// \param opacity The opacity level to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setOpacityWithInt:(NSInteger)opacity;
/// Adjust the opacity of the image and make it semi-transparent. 100 means opaque, while 0 is completely transparent.
/// \param opacity The opacity level to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setOpacity:(NSString * _Nonnull)opacity;
/// Add a solid border around the image.
/// \param width The border width.
///
/// \param color The border color.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setBorder:(NSInteger)width color:(NSString * _Nonnull)color;
/// Add a solid border around the image.
/// Should conform to the form: [width]px_solid_[color], e.g - 5px_solid_#111111 or 5px_solid_red
/// \param border The border to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setBorder:(NSString * _Nonnull)border;
/// Horizontal position for custom-coordinates based cropping, overlay placement and certain region related effects.
/// \param x The x position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setXFromInt:(NSInteger)x;
/// Horizontal position for custom-coordinates based cropping, overlay placement and certain region related effects.
/// \param x The x position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setXFromFloat:(float)x;
/// Horizontal position for custom-coordinates based cropping, overlay placement and certain region related effects.
/// \param x The x position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setX:(NSString * _Nonnull)x;
/// Vertical position for custom-coordinates based cropping and overlay placement.
/// \param y The y position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setYFromInt:(NSInteger)y;
/// Vertical position for custom-coordinates based cropping and overlay placement.
/// \param y The y position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setYFromFloat:(float)y;
/// Vertical position for custom-coordinates based cropping and overlay placement.
/// \param y The y position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setY:(NSString * _Nonnull)y;
/// Round the corners of an image or make it completely circular or oval (ellipse).
/// \param radius The radius to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setRadiusFromInt:(NSInteger)radius;
/// Round the corners of an image or make it completely circular or oval (ellipse).
/// \param radius The radius to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setRadius:(NSString * _Nonnull)radius;
/// Support an array value for radius
/// \param radius - The radius to apply- an array of values
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setRadiusFromArray:(NSArray * _Nonnull)radius;
/// Set the image quality for the transformation, see CLDQuality for options.
/// \param quality A CLDQuality instance containing the quality settings.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setQualityFromQuality:(CLDQuality * _Nonnull)quality;
/// Control the JPEG, WebP, GIF, JPEG XR and JPEG 2000 compression quality. 1 is the lowest quality and 100 is the highest. Reducing quality generates JPG images much smaller in file size. The default values are:
/// <ul>
///   <li>
///     JPEG: 90
///   </li>
///   <li>
///     WebP: 80 (100 quality for WebP is lossless)
///   </li>
///   <li>
///     GIF: lossless by default. 80 if the <code>lossy</code> flag is added
///   </li>
///   <li>
///     JPEG XR and JPEG 2000: 70
///   </li>
/// </ul>
/// \param quality The quality to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setQualityFromInt:(NSInteger)quality SWIFT_DEPRECATED_MSG("Use setQuality(CLDQuality)");
/// Control the JPEG, WebP, GIF, JPEG XR and JPEG 2000 compression quality. 1 is the lowest quality and 100 is the highest. Reducing quality generates JPG images much smaller in file size. The default values are:
/// <ul>
///   <li>
///     JPEG: 90
///   </li>
///   <li>
///     WebP: 80 (100 quality for WebP is lossless)
///   </li>
///   <li>
///     GIF: lossless by default. 80 if the <code>lossy</code> flag is added
///   </li>
///   <li>
///     JPEG XR and JPEG 2000: 70
///   </li>
/// </ul>
/// \param quality The quality to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setQuality:(NSString * _Nonnull)quality;
/// Specify the public ID of a placeholder image to use if the requested image or social network picture does not exist.
/// \param defaultImage The identifier of the default image.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDefaultImage:(NSString * _Nonnull)defaultImage;
/// Decides which part of the image to keep while ‘crop’, ‘pad’ and ‘fill’ crop modes are used.
/// \param gravity The gravity to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setGravityWithGravity:(enum CLDGravity)gravity;
/// Decides which part of the image to keep while ‘crop’, ‘pad’ and ‘fill’ crop modes are used.
/// \param gravity The gravity to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setGravity:(NSString * _Nonnull)gravity;
/// Set the transformation color space.
/// \param colorSpace The color space to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setColorSpace:(NSString * _Nonnull)colorSpace;
/// Set the transformation prefix.
/// \param prefix The prefix to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setPrefix:(NSString * _Nonnull)prefix;
/// Add an overlay over the base image. You can control the dimension and position of the overlay using the width, height, x, y and gravity parameters.
/// The overlay can take one of the following forms:
/// identifier can be a public ID of an uploaded image or a specific image kind, public ID and settings.
/// <em>You can use the convenience method <code>addOverlayWithLayer</code></em>
/// \param overlay The overlay to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setOverlay:(NSString * _Nonnull)overlay;
/// Add an underlay image below a base partially-transparent image.
/// You can control the dimensions and position of the underlay using the width, height, x, y and gravity parameters.
/// The identifier can be a public ID of an uploaded image or a specific image kind, public ID and settings.
/// The underlay parameter shares the same features as the overlay parameter.
/// <em>You can use the convenience method <code>addUnderlayWithLayer</code></em>
/// \param underlay The underlay to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setUnderlay:(NSString * _Nonnull)underlay;
/// Force format conversion to the given image format for remote ‘fetch’ URLs and auto uploaded images that already have a different format as part of their URLs.
/// \param fetchFormat The fetchFormat to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setFetchFormat:(NSString * _Nonnull)fetchFormat;
/// Control the density to use while converting a PDF document to images. (range: 50-300, default is 150)
/// \param density The density to use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDensityWithInt:(NSInteger)density;
/// Control the density to use while converting a PDF document to images. (range: 50-300, default is 150)
/// \param density The density to use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDensity:(NSString * _Nonnull)density;
/// Given a multi-page file (PDF, animated GIF, TIFF), generate an image of a single page using the given index.
/// \param page The index of the page to use to use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setPageWithInt:(NSInteger)page;
/// Given a multi-page file (PDF, animated GIF, TIFF), generate an image of a single page using the given index.
/// \param page The index of the page to use to use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setPage:(NSString * _Nonnull)page;
/// Controls the time delay between the frames of an animated image, in milliseconds.
/// \param delay The delay between the frames of an animated image, in milliseconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDelayWithInt:(NSInteger)delay;
/// Controls the time delay between the frames of an animated image, in milliseconds.
/// \param delay The delay between the frames of an animated image, in milliseconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDelay:(NSString * _Nonnull)delay;
/// Add a raw transformation, it will be appended to the other transformation parameter.
/// the transformation must conform to <a href="http://cloudinary.com/documentation/image_transformation_reference">Cloudinary’s transformation documentation</a>
/// \param rawTransformation The raw transformation to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setRawTransformation:(NSString * _Nonnull)rawTransformation;
/// Set one or more flags that alter the default transformation behavior.
/// \param flags An array of the flags to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setFlagsWithArray:(NSArray<NSString *> * _Nonnull)flags;
/// Set one or more flags that alter the default transformation behavior.
/// \param flags An array of the flags to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setFlags:(NSString * _Nonnull)flags;
/// Deliver the image in the specified device pixel ratio.
/// \param dpr The DPR ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDprWithFloat:(float)dpr;
/// Deliver the image in the specified device pixel ratio. The parameter accepts any positive float value.
/// \param dpr The DPR ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDpr:(NSString * _Nonnull)dpr;
/// Control how much of the original image surrounding the face to keep when using either the ‘crop’ or ‘thumb’ cropping modes with face detection. default is 1.0.
/// \param zoom The zoom ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setZoomWithFloat:(float)zoom;
/// Control how much of the original image surrounding the face to keep when using either the ‘crop’ or ‘thumb’ cropping modes with face detection. default is 1.0.
/// \param zoom The zoom ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setZoom:(NSString * _Nonnull)zoom;
/// Resize or crop the image to a new aspect ratio using a nominator and dominator (e.g. 16 and 9 for 16:9).
/// This parameter is used together with a specified crop mode that determines how the image is adjusted to the new dimensions.
/// \param nominator The nominator ot use.
///
/// \param denominator The dominator ot use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setAspectRatioWithNominator:(NSInteger)nominator denominator:(NSInteger)denominator;
/// Resize or crop the image to a new aspect ratio.
/// This parameter is used together with a specified crop mode that determines how the image is adjusted to the new dimensions.
/// \param aspectRatio The aspect ratio ot use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setAspectRatioWithFloat:(float)aspectRatio;
/// Resize or crop the image to a new aspect ratio.
/// This parameter is used together with a specified crop mode that determines how the image is adjusted to the new dimensions.
/// \param aspectRatio The aspect ratio ot use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setAspectRatio:(NSString * _Nonnull)aspectRatio;
/// Set a custom pre-function, such as a call to a lambda function or a web-assembly function.
/// \param customPreFunction The custom pre-function to perform, see CLDCustomFunction.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setCustomPreFunction:(CLDCustomFunction * _Nonnull)customPreFunction;
/// Set a custom function, such as a call to a lambda function or a web-assembly function.
/// \param customFunction The custom function to perform, see CLDCustomFunction.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setCustomFunction:(CLDCustomFunction * _Nonnull)customFunction;
/// Use the audio_codec parameter to set the audio codec or remove the audio channel completely as follows:
/// <ul>
///   <li>
///     <em>none</em> removes the audio channel
///   </li>
///   <li>
///     <em>aac</em> (mp4 or flv only)
///   </li>
///   <li>
///     <em>vorbis</em> (ogv or webm only)
///   </li>
///   <li>
///     <em>mp3</em> (mp4 or flv only)
///   </li>
/// </ul>
/// \param audioCodec The audio codec ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setAudioCodec:(NSString * _Nonnull)audioCodec;
/// Use the audio_frequency parameter to control the audio sampling frequency.
/// This parameter represents an integer value in Hz.
/// See the documentation in the <a href="http://cloudinary.com/documentation/video_manipulation_and_delivery#video_transformations_reference">Video transformations reference table</a> for the possible values.
/// \param audioFrequency The audio frequency ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setAudioFrequencyWithInt:(NSInteger)audioFrequency;
/// Use the audio_frequency parameter to control the audio sampling frequency.
/// This parameter represents an integer value in Hz.
/// See the documentation in the <a href="http://cloudinary.com/documentation/video_manipulation_and_delivery#video_transformations_reference">Video transformations reference table</a> for the possible values.
/// \param audioFrequency The audio frequency ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setAudioFrequency:(NSString * _Nonnull)audioFrequency;
/// Use the bit_rate parameter for advanced control of the video bit rate.
/// This parameter controls the number of bits used to represent the video data.
/// The higher the bit rate, the higher the visual quality of the video, but the larger the file size as well.
/// \param bitRate The bit rate ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setBitRateWithInt:(NSInteger)bitRate;
/// Use the bit_rate parameter for advanced control of the video bit rate.
/// This parameter controls the number of bits used to represent the video data.
/// The higher the bit rate, the higher the visual quality of the video, but the larger the file size as well.
/// \param bitRate The bit rate ot set in kilobytes.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setBitRateWithKb:(NSInteger)bitRate;
/// Use the bit_rate parameter for advanced control of the video bit rate.
/// This parameter controls the number of bits used to represent the video data.
/// The higher the bit rate, the higher the visual quality of the video, but the larger the file size as well.
/// Bit rate can take one of the following values:
/// <ul>
///   <li>
///     An integer e.g. 120000.
///   </li>
///   <li>
///     A string supporting ‘k’ and ‘m’ (kilobits and megabits respectively) e.g. 500k or 2m.
///   </li>
/// </ul>
/// \param bitRate The bit rate ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setBitRate:(NSString * _Nonnull)bitRate;
/// The total number of frames to sample from the original video. The frames are spread out over the length of the video, e.g. 20 takes one frame every 5%.
/// \param frames The video sampling frames ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVideoSamplingWithFrames:(NSInteger)frames;
/// Controls the time delay between the frames of an animated image, in milliseconds.
/// \param delay The delay ot set in milliseconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVideoSamplingWithDelay:(float)delay;
/// Relevant for conversion of video to animated GIF or WebP.
/// If not specified, the resulting GIF or WebP samples the whole video (up to 400 frames, at up to 10 frames per second).
/// By default the duration of the animated image is the same as the duration of the video,
/// no matter how many frames are sampled from the original video (use the delay parameter to adjust the amount of time between frames).
/// \param videoSampling The video sampling ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVideoSampling:(NSString * _Nonnull)videoSampling;
/// Offset in seconds or percent of a video, normally used together with the start_offset and end_offset parameters. Used to specify:
/// <ul>
///   <li>
///     The duration the video displays.
///   </li>
///   <li>
///     The duration an overlay displays.
///   </li>
/// </ul>
/// \param seconds The duration to set in seconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDurationWithSeconds:(float)seconds;
/// Offset in seconds or percent of a video, normally used together with the start_offset and end_offset parameters. Used to specify:
/// <ul>
///   <li>
///     The duration the video displays.
///   </li>
///   <li>
///     The duration an overlay displays.
///   </li>
/// </ul>
/// \param percent The duration percent to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDurationWithPercent:(NSInteger)percent;
/// Offset in seconds or percent of a video, normally used together with the start_offset and end_offset parameters. Used to specify:
/// <ul>
///   <li>
///     The duration the video displays.
///   </li>
///   <li>
///     The duration an overlay displays.
///   </li>
/// </ul>
/// \param duration The duration to set in seconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDuration:(NSString * _Nonnull)duration;
/// Set an offset in seconds to cut a video at the start.
/// \param seconds The start time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setStartOffsetWithSeconds:(float)seconds;
/// Set an offset in percent to cut a video at the start.
/// \param percent The percent of time to cut.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setStartOffsetWithPercent:(NSInteger)percent;
/// Set an offset in seconds or percent of a video to cut a video at the start.
/// \param duration The start time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setStartOffset:(NSString * _Nonnull)duration;
/// Set an offset in seconds to cut a video at the end.
/// \param seconds The end time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setEndOffsetWithSeconds:(float)seconds;
/// Set an offset in percent to cut a video at the end.
/// \param percent The percent of time to cut.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setEndOffsetWithPercent:(NSInteger)percent;
/// Set an offset in seconds or percent of a video to cut a video at the end.
/// \param duration The end time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setEndOffset:(NSString * _Nonnull)duration;
/// Used to determine the video codec, video profile and level to use.
/// You can set this parameter to auto instead.
/// \param videoCodec The video codec to set.
///
/// \param videoProfile The video profile to set.
///
/// \param level The level to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVideoCodecAndProfileAndLevel:(NSString * _Nonnull)videoCodec videoProfile:(NSString * _Nonnull)videoProfile level:(NSString * _Nullable)level;
/// Used to determine the video codec to use.
/// You can set this parameter to auto instead.
/// \param videoCodec The video codec to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setVideoCodec:(NSString * _Nonnull)videoCodec;
- (nonnull instancetype)setParam:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// Shortcut to set video cutting in seconds using a combination of start_offset and end_offset values.
/// \param startSeconds The start time to set.
///
/// \param endSeconds The end time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setStartOffsetAndEndOffsetWithStartSeconds:(float)startSeconds endSeconds:(float)endSeconds;
/// Shortcut to set video cutting in percent of video using a combination of start_offset and end_offset values.
/// \param startPercent The start time to set.
///
/// \param endPercent The end time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setStartOffsetAndEndOffsetWithStartPercent:(NSInteger)startPercent endPercent:(NSInteger)endPercent;
/// Set the frames-per-second of the video.
/// \param fps A CLDFps configured with the required parameters (see CLDFps for details).
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setFps:(CLDFps * _Nonnull)fps;
/// Set the frames-per-second of the video.
/// \param fps Frames per second as string.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setFpsWithString:(NSString * _Nonnull)fps;
/// Set the frames-per-second of the video.
/// \param fps Frames per seconds as float.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setFpsWithFloat:(float)fps;
/// Set an overlay using the helper class CLDLayer.
/// \param layer The layer to add as an overlay.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setOverlayWithLayer:(CLDLayer * _Nonnull)layer;
/// Set an underlay using the helper class CLDLayer.
/// \param layer The layer to add as an underlay.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setUnderlayWithLayer:(CLDLayer * _Nonnull)layer;
/// A convenience method to set the transformation X and Y parameters.
/// \param point The top left pont to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setTopLeftPoint:(CGPoint)point;
- (nonnull instancetype)setKeyframeIntervalWithInterval:(float)interval;
- (nonnull instancetype)setKeyframeInterval:(NSString * _Nonnull)interval;
- (nonnull instancetype)setStreamingProfile:(NSString * _Nonnull)streamingProfile;
/// Cloudinary supports powerful image transformations that are applied on the fly using dynamic URLs,
/// and you can also combine multiple transformations together as part of a single delivery request, e.g. crop an image and then add a border.
/// In certain cases you may want to perform additional transformations on the result of a single transformation request.
/// In order to do that, you can chain the transformations together.
/// In practice, the chain allows you to start seting properties to a new transformation,
/// which will be chained to the transformation you worked on, even though you still use the same CLDTransformation instance.
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)chain;
- (NSString * _Nullable)asString SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtCC10Cloudinary17CLDTransformation12CLDBaseParam")
@interface CLDBaseParam : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Image quality configuration object
SWIFT_CLASS("_TtCC10Cloudinary17CLDTransformation10CLDQuality")
@interface CLDQuality : CLDBaseParam
@end

/// Automatic optimal quality settings: the smallest file size without affecting their perceptual quality.
/// <ul>
///   <li>
///     best: Automatically calculate the optimal quality for images using a less aggressive algorithm
///   </li>
///   <li>
///     good: Automatically calculate the optimal quality for an image
///   </li>
///   <li>
///     eco: Automatically calculate the optimal quality for images using a more aggressive algorithm
///   </li>
///   <li>
///     low: Automatically calculate the optimal quality for images using the most aggressive algorithm
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, CLDQualityAuto, closed) {
  CLDQualityAutoBest = 0,
  CLDQualityAutoGood = 1,
  CLDQualityAutoEco = 2,
  CLDQualityAutoLow = 3,
};

/// Custom function configuration object
SWIFT_CLASS("_TtCC10Cloudinary17CLDTransformation17CLDCustomFunction")
@interface CLDCustomFunction : CLDBaseParam
/// Build an instance of CLDCustomFunction configured for web-assembly custom function.
/// \param publicId Public id of the web assembly file.
///
+ (CLDCustomFunction * _Nonnull)wasm:(NSString * _Nonnull)publicId SWIFT_WARN_UNUSED_RESULT;
/// Build an instance of CLDCustomFunction configured for remote lambda custom function.
/// \param url public url of the aws lambda function
///
+ (CLDCustomFunction * _Nonnull)remote:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end

/// FPS parameters configuration object. For simple cases you can pass a float/string
/// directly to CLDTransformation.setFps(). This class is used for more complex values (e.g. ranges).
SWIFT_CLASS("_TtCC10Cloudinary17CLDTransformation6CLDFps")
@interface CLDFps : CLDBaseParam
@end

typedef SWIFT_ENUM(NSInteger, CLDCrop, closed) {
  CLDCropFill = 0,
  CLDCropCrop = 1,
  CLDCropScale = 2,
  CLDCropFit = 3,
  CLDCropLimit = 4,
  CLDCropMFit = 5,
  CLDCropLFill = 6,
  CLDCropPad = 7,
  CLDCropLPad = 8,
  CLDCropMPad = 9,
  CLDCropThumb = 10,
  CLDCropImaggaCrop = 11,
  CLDCropImaggaScale = 12,
};

typedef SWIFT_ENUM(NSInteger, CLDEffect, closed) {
  CLDEffectHue = 0,
  CLDEffectRed = 1,
  CLDEffectGreen = 2,
  CLDEffectBlue = 3,
  CLDEffectNegate = 4,
  CLDEffectBrightness = 5,
  CLDEffectSepia = 6,
  CLDEffectGrayscale = 7,
  CLDEffectBlackwhite = 8,
  CLDEffectSaturation = 9,
  CLDEffectColorize = 10,
  CLDEffectContrast = 11,
  CLDEffectAutoContrast = 12,
  CLDEffectVibrance = 13,
  CLDEffectAutoColor = 14,
  CLDEffectImprove = 15,
  CLDEffectAutoBrightness = 16,
  CLDEffectFillLight = 17,
  CLDEffectViesusCorrect = 18,
  CLDEffectGamma = 19,
  CLDEffectScreen = 20,
  CLDEffectMultiply = 21,
  CLDEffectOverlay = 22,
  CLDEffectMakeTransparent = 23,
  CLDEffectTrim = 24,
  CLDEffectShadow = 25,
  CLDEffectDistort = 26,
  CLDEffectShear = 27,
  CLDEffectDisplace = 28,
  CLDEffectOilPaint = 29,
  CLDEffectRedeye = 30,
  CLDEffectAdvRedeye = 31,
  CLDEffectVignette = 32,
  CLDEffectGradientFade = 33,
  CLDEffectPixelate = 34,
  CLDEffectPixelateRegion = 35,
  CLDEffectPixelateFaces = 36,
  CLDEffectBlur = 37,
  CLDEffectBlurRegion = 38,
  CLDEffectBlurFaces = 39,
  CLDEffectSharpen = 40,
  CLDEffectUnsharpMask = 41,
  CLDEffectOrderedDither = 42,
  CLDEffectArt = 43,
  CLDEffectAssistColorblind = 44,
  CLDEffectPreview = 45,
};

typedef SWIFT_ENUM(NSInteger, CLDArtFilters, closed) {
  CLDArtFiltersAlDente = 0,
  CLDArtFiltersAthena = 1,
  CLDArtFiltersAudrey = 2,
  CLDArtFiltersAurora = 3,
  CLDArtFiltersDaguerre = 4,
  CLDArtFiltersEucalyptus = 5,
  CLDArtFiltersFes = 6,
  CLDArtFiltersFrost = 7,
  CLDArtFiltersHairspray = 8,
  CLDArtFiltersHokusai = 9,
  CLDArtFiltersIncognito = 10,
  CLDArtFiltersLinen = 11,
  CLDArtFiltersPeacock = 12,
  CLDArtFiltersPrimavera = 13,
  CLDArtFiltersQuartz = 14,
  CLDArtFiltersRedRock = 15,
  CLDArtFiltersRefresh = 16,
  CLDArtFiltersSizzle = 17,
  CLDArtFiltersSonnet = 18,
  CLDArtFiltersUkulele = 19,
  CLDArtFiltersZorro = 20,
};

typedef SWIFT_ENUM(NSInteger, CLDGravity, closed) {
  CLDGravityCenter = 0,
  CLDGravityAuto = 1,
  CLDGravityFace = 2,
  CLDGravityFaceCenter = 3,
  CLDGravityFaces = 4,
  CLDGravityFacesCenter = 5,
  CLDGravityAdvFace = 6,
  CLDGravityAdvFaces = 7,
  CLDGravityAdvEyes = 8,
  CLDGravityNorth = 9,
  CLDGravityNorthWest = 10,
  CLDGravityNorthEast = 11,
  CLDGravitySouth = 12,
  CLDGravitySouthWest = 13,
  CLDGravitySouthEast = 14,
  CLDGravityEast = 15,
  CLDGravityWest = 16,
  CLDGravityXyCenter = 17,
  CLDGravityCustom = 18,
  CLDGravityCustomFace = 19,
  CLDGravityCustomFaces = 20,
  CLDGravityCustomAdvFace = 21,
  CLDGravityCustomAdvFaces = 22,
  CLDGravityAutoOcrText = 23,
  CLDGravityOcrText = 24,
  CLDGravityOcrTextAdvOcr = 25,
};

SWIFT_CLASS("_TtC10Cloudinary22CLDEagerTransformation")
@interface CLDEagerTransformation : CLDTransformation
- (nonnull instancetype)setFormat:(NSString * _Nullable)format SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithInput:(NSArray<CLDTransformation *> * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;
@end

@class CLDExplicitResult;
/// The <code>CLDExplodeRequest</code> object is returned when creating an explode request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary18CLDExplicitRequest")
@interface CLDExplicitRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDExplicitRequest.
- (CLDExplicitRequest * _Nonnull)response:(void (^ _Nullable)(CLDExplicitResult * _Nullable, NSError * _Nullable))completionHandler;
@end

enum CLDModeration : NSInteger;
@class CLDResponsiveBreakpoints;
/// This class represents the different parameters that can be passed when performing an upload request.
/// For more information see the <a href="http://cloudinary.com/documentation/image_upload_api_reference#upload">documentation</a>.
SWIFT_CLASS("_TtC10Cloudinary22CLDUploadRequestParams")
@interface CLDUploadRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDUploadRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDUploadRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable notificationUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable eagerNotificationUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable proxy;
@property (nonatomic, readonly, copy) NSString * _Nullable folder;
@property (nonatomic, readonly, copy) NSString * _Nullable moderation;
@property (nonatomic, readonly, copy) NSString * _Nullable accessControl;
@property (nonatomic, readonly, copy) NSString * _Nullable eval;
@property (nonatomic, readonly, copy) NSString * _Nullable rawConvert;
@property (nonatomic, readonly, copy) NSString * _Nullable detection;
@property (nonatomic, readonly, copy) NSString * _Nullable categorization;
@property (nonatomic, readonly, copy) NSString * _Nullable similaritySearch;
@property (nonatomic, readonly, copy) NSString * _Nullable autoTagging;
@property (nonatomic, readonly, copy) NSString * _Nullable transformation;
@property (nonatomic, readonly, copy) NSString * _Nullable tags;
@property (nonatomic, readonly, copy) NSString * _Nullable allowedFormats;
@property (nonatomic, readonly, copy) NSString * _Nullable context;
@property (nonatomic, readonly, copy) NSString * _Nullable faceCoordinates;
@property (nonatomic, readonly, copy) NSString * _Nullable customCoordinates;
@property (nonatomic, readonly, copy) NSString * _Nullable eager;
@property (nonatomic, readonly, copy) NSString * _Nullable headers;
@property (nonatomic, readonly) BOOL ocr;
@property (nonatomic, readonly, copy) NSString * _Nullable backgroundRemoval;
@property (nonatomic, readonly, copy) NSString * _Nullable filenameOverride;
@property (nonatomic, readonly, copy) NSString * _Nullable assetFolder;
@property (nonatomic, readonly, copy) NSString * _Nullable publicIdPrefix;
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
/// Set the identifier that is used for accessing the uploaded resource.
/// A randomly generated ID is assigned if not specified. The Public ID may contain a full path including folders separated by a slash (/).
/// \param publicId The identifier to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setPublicId:(NSString * _Nonnull)publicId;
/// Set the identifier prefix that is used for accessing the uploaded resource.
/// \param prefix The prefix to prepend.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setPublicIdPrefix:(NSString * _Nonnull)prefix;
/// Set an optional format to convert the uploaded resource to before saving in the cloud. For example: jpg.
/// \param format The format to convert to.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setFormat:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// Allows uploading resources as ‘private’ or ‘authenticated’ instead of the default public mode.
/// \param type The type to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTypeFromType:(enum CLDType)type SWIFT_WARN_UNUSED_RESULT;
/// Allows uploading resources as ‘private’ or ‘authenticated’ instead of the default public mode.
/// \param type The type to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setType:(NSString * _Nonnull)type;
/// Set an HTTP URL to send notification to (a webhook) when the upload is completed.
/// \param notificationUrl The URL to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setNotificationUrl:(NSString * _Nonnull)notificationUrl SWIFT_WARN_UNUSED_RESULT;
/// The default background removal behavior detects the foreground objects(s) of the image and removes the background.
/// You activate this behavior by setting the ‘backgroundRemoval’ parameter to ‘cloudinary_ai’ when uploading an image (Upload method)
/// or by using the Update method of the Admin API for existing images.
/// \param backgroundRemoval Use ‘cloudinary_ai’ or ‘cloudinary_ai:[object_to_keep]’
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setBackgroundRemoval:(NSString * _Nonnull)backgroundRemoval;
/// Setting this params will override the original asset name.
/// \param filenameOverride New file name
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setFilenameOverride:(NSString * _Nonnull)filenameOverride;
/// Setting this will generate chapters file.
/// \param autoChaptering The boolean paramter
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAutoChpatering:(BOOL)autoChaptering;
/// Setting this will generate transcription file.
/// \param autoChaptering The boolean paramter
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAutoTranscription:(BOOL)autoTranscription;
/// Set an HTTP URL to send notification to (a webhook) when the generation of eager transformations is completed.
/// \param eagerNotificationUrl The URL to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setEagerNotificationUrl:(NSString * _Nonnull)eagerNotificationUrl SWIFT_WARN_UNUSED_RESULT;
/// Tells Cloudinary to upload resources from remote URLs through the given proxy. Format: http://hostname:port.
/// \param proxy The proxy URL.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setProxy:(NSString * _Nonnull)proxy SWIFT_WARN_UNUSED_RESULT;
/// Set an optional folder name where the uploaded resource will be stored. The Public ID contains the full path of the uploaded resource, including the folder name.
/// \param folder The folder URL.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setFolder:(NSString * _Nonnull)folder;
/// Set an optional asset folder url where the uploaded resource will be stored.
/// \param assetFolder The folder URL.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAssetFolder:(NSString * _Nonnull)assetFolder;
/// Set the display name of the uploaded resource.
/// \param displayName The name of the resource.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setDisplayName:(NSString * _Nonnull)displayName;
/// Set A boolean parameter that determines whether to use the filename as the display name of the uploaded resource.
/// \param useFilenameAsDisplayName The boolean parameter.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setUseFilenameAsDisplayName:(BOOL)useFilenameAsDisplayName;
/// Set to manual to add the uploaded image to a queue of pending moderation images that can be moderated using the Admin API or the Cloudinary Management Console.
/// Set to webpurify to automatically moderate the uploaded image using the WebPurify Image Moderation add-on.
/// \param moderation The moderation to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setModerationFromModeration:(enum CLDModeration)moderation;
/// Set to manual to add the uploaded image to a queue of pending moderation images that can be moderated using the <a href="https://cloudinary.com/console/media_library">Cloudinary Management Console</a>.
/// Set to webpurify to automatically moderate the uploaded image using the <a href="http://dev.cloudinary.com:3002/documentation/webpurify_image_moderation_addon">WebPurify Image Moderation add-on</a>.
/// \param moderation The moderation to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setModeration:(NSString * _Nonnull)moderation SWIFT_WARN_UNUSED_RESULT;
/// Set to aspose to automatically convert Office documents to PDF files and other image formats using the <a href="http://dev.cloudinary.com:3002/documentation/aspose_document_conversion_addon">Aspose Document Conversion add-on</a>.
/// \param rawConvert The rawConvert to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setRawConvert:(NSString * _Nonnull)rawConvert;
/// Set to adv_face to extract an extensive list of face attributes from a image using the <a href="http://cloudinary.com/documentation/advanced_facial_attributes_detection_addon">Advanced Facial Attribute Detection add-on</a>.
/// \param detection The detection to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setDetection:(NSString * _Nonnull)detection;
/// By setting the categorization parameter to imagga_tagging, Imagga is used to automatically classify the scenes of the uploaded image.
/// \param categorization The categorization to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setCategorization:(NSString * _Nonnull)categorization;
/// \param similaritySearch The similarity search to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setSimilaritySearch:(NSString * _Nonnull)similaritySearch;
/// \param accessControl A list of access control rules for the upload request
///
///
/// returns:
/// The same instance CLDUploadRequestParams
- (nonnull instancetype)setAccessControl:(NSArray<CLDAccessControlRule *> * _Nonnull)accessControl;
/// \param accessControl A json string representing a list of access control rules for upload
///
///
/// returns:
/// The same instance CLDUploadRequestParams
- (nonnull instancetype)setAccessControlWithString:(NSString * _Nonnull)accessControl;
/// Set whether to assign tags to an image according to detected scene categories with a confidence score higher than the given value (between 0.0 and 1.0).
/// See <a href="http://dev.cloudinary.com:3002/documentation/imagga_auto_tagging_addon">Imagga Auto Tagging</a> for more details.
/// \param autoTagging The auto tagging parameter to use.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAutoTaggingWithDouble:(double)autoTagging;
/// Set whether to assign tags to an image according to detected scene categories with a confidence score higher than the given value (between 0.0 and 1.0).
/// See <a href="http://dev.cloudinary.com:3002/documentation/imagga_auto_tagging_addon">Imagga Auto Tagging</a> for more details.
/// \param autoTagging The auto tagging parameter to use.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAutoTagging:(NSString * _Nonnull)autoTagging;
/// Set A boolean parameter that determines whether to backup the uploaded resource. Overrides the default backup settings of your account.
/// \param backup The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setBackup:(BOOL)backup;
/// Set A boolean parameter that determines whether to use the original file name of the uploaded resource if available for the Public ID.
/// The file name is normalized and random characters are appended to ensure uniqueness. Default: false.
/// \param useFilename The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setUseFilename:(BOOL)useFilename;
/// When set to false, should not add random characters at the end of the filename that guarantee its uniqueness. Only relevant if use_filename is also set to true. Default: true.
/// \param uniqueFilename The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setUniqueFilename:(BOOL)uniqueFilename;
/// Set A boolean parameter that determines whether to discard the name of the original uploaded file.
/// Relevant when delivering resources as attachments (setting the flag transformation parameter to attachment).
/// Default: false.
/// \param discardOriginalFilename The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setDiscardOriginalFilename:(BOOL)discardOriginalFilename;
/// Set a boolean parameter indicating whether to perform the image generation asynchronously. default is false.
/// \param async The boolean parameter.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAsync:(BOOL)async;
/// Set A boolean parameter that determines whether to generate the eager transformations asynchronously in the background. default is false.
/// \param eagerAsync The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setEagerAsync:(BOOL)eagerAsync;
/// Set boolean parameter indicating whether or not the asset should be invalidated through the CDN. default is false.
/// \param invalidate The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setInvalidate:(BOOL)invalidate;
/// Set boolean parameter indicating whether to overwrite existing resources with the same Public ID. When set to false, return immediately if a resource with the same Public ID was found.
/// Default: true (when using unsigned upload, the default is false and cannot be changed to true).
/// \param overwrite The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setOverwrite:(BOOL)overwrite;
/// Set a boolean parameter indicating whether to retrieve IPTC and detailed Exif metadata of the uploaded asset. default is false.
/// \param imageMetadata The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setImageMetadata:(BOOL)imageMetadata SWIFT_DEPRECATED_MSG("Use the new method 'setMediaMetadata' instead.");
/// Set a boolean parameter indicating whether to return IPTC, XMP, and detailed Exif metadata of the uploaded asset in the response. default is false.
/// \param mediaMetadata The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setMediaMetadata:(BOOL)mediaMetadata;
/// Set a boolean parameter indicating whether to retrieve predominant colors & color histogram of the uploaded asset. default is false.
/// \param colors The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setColors:(BOOL)colors;
/// Set a boolean parameter indicating whether to return the perceptual hash (pHash) on the uploaded asset.
/// The pHash acts as a fingerprint that allows checking image similarity. default is false.
/// \param phash The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setPhash:(BOOL)phash;
/// Set a boolean parameter indicating whether to return the coordinates of faces contained in an uploaded asset (automatically detected or manually defined).
/// Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face. default is false.
/// \param faces The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setFaces:(BOOL)faces;
/// Set a boolean parameter indicating whether to return a deletion token in the upload response.
/// The token can be used to delete the uploaded resource within 10 minutes using an unauthenticated API request.
/// Default: false.
/// \param returnDeleteToken The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setReturnDeleteToken:(BOOL)returnDeleteToken;
/// Set a boolean parameter indicating whether to return quality analysis of the image.
/// Default: false.
/// \param qualityAnalysis The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setQualityAnalysis:(BOOL)qualityAnalysis;
/// Set a boolean parameter indicating whether to return accessibility analysis of the image.
/// Default: false.
/// \param accessibilityAnalysis The boolean parameter.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAccessibilityAnalysis:(BOOL)accessibilityAnalysis;
/// Set the upload preset.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#unsigned_upload">documentation</a>.
/// \param uploadPreset The upload preset from your account settings.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setUploadPreset:(NSString * _Nonnull)uploadPreset;
/// Apply an incoming transformation as part of the upload request.
/// Any image transformation parameter can be specified as an option in the upload call and these transformations are applied before saving the image in the cloud.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#incoming_transformations">documentation</a>.
/// \param transformation The transformation to apply on the uploaded asset.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTransformationFromTransformation:(CLDTransformation * _Nonnull)transformation;
/// Apply an incoming transformation as part of the upload request.
/// Any image transformation parameter can be specified as an option in the upload call and these transformations are applied before saving the image in the cloud.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#incoming_transformations">documentation</a>.
/// \param transformation The transformation to apply on the uploaded asset.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTransformation:(NSString * _Nonnull)transformation;
/// Assign tags to the uploaded files.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#tagging_images">documentation</a>.
/// \param tags The tags to aggign to the uploaded asset.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTagsWithArray:(NSArray<NSString *> * _Nonnull)tags;
/// Assign tags to the uploaded files.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#tagging_images">documentation</a>.
/// \param tags The tags to aggign to the uploaded asset.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTags:(NSString * _Nonnull)tags;
/// Set An array of file formats that are allowed for uploading.
/// The default is any supported image format for images, and any kind of raw file.
/// Files of other types will be rejected.
/// The formats can be any combination of image types, video formats or raw file extensions.
/// For example: <code>mp4,ogv,jpg,png,pdf</code>
/// \param allowedFormats The array of allowed formats.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAllowedFormatsWithArray:(NSArray<NSString *> * _Nonnull)allowedFormats;
/// Set An array of file formats that are allowed for uploading.
/// The default is any supported image format for images, and any kind of raw file.
/// Files of other types will be rejected.
/// The formats can be any combination of image types, video formats or raw file extensions.
/// For example: <code>mp4,ogv,jpg,png,pdf</code>
/// \param allowedFormats The array of allowed formats.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAllowedFormats:(NSString * _Nonnull)allowedFormats;
/// Set a dictionary of the key-value pairs of general textual context metadata to attach to an uploaded resource.
/// The context values of uploaded files are available for fetching using the Admin API.
/// For example: <code>alt=My image❘caption=Profile image</code>.
/// \param context The context dictionary.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setContextFromDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)context;
/// Set a dictionary of the key-value pairs of general textual context metadata to attach to an uploaded resource.
/// The context values of uploaded files are available for fetching using the Admin API.
/// For example: <code>alt=My image❘caption=Profile image</code>.
/// \param context The context dictionary.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setContext:(NSString * _Nonnull)context;
/// Sets the coordinates of faces contained in an uploaded image and overrides the automatically detected faces.
/// Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face.
/// \param faceCoordinates The array of <code>CLDCoodinate</code> objects, each object holds a CGRect for a single face coordinate.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setFaceCoordinatesFromCoordinates:(NSArray<CLDCoordinate *> * _Nonnull)faceCoordinates;
/// Sets the coordinates of faces contained in an uploaded image and overrides the automatically detected faces.
/// Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face.
/// \param faceCoordinates The array of <code>CLDCoodinate</code> objects, each object holds a CGRect for a single face coordinate.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setFaceCoordinates:(NSString * _Nonnull)faceCoordinates;
/// Sets the coordinates of a region contained in an uploaded image that is subsequently used for cropping uploaded images using the custom gravity mode.
/// The region is specified by the X & Y coordinates of the top left corner and the width & height of the region.
/// \param customCoordinates The array of <code>CLDCoodinate</code> objects, each object holds a CGRect for a single custom coordinate.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setCustomCoordinatesFromCoordinates:(NSArray<CLDCoordinate *> * _Nonnull)customCoordinates;
/// Sets the coordinates of a region contained in an uploaded image that is subsequently used for cropping uploaded images using the custom gravity mode.
/// The region is specified by the X & Y coordinates of the top left corner and the width & height of the region.
/// \param customCoordinates The array of <code>CLDCoodinate</code> objects, each object holds a CGRect for a single custom coordinate.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setCustomCoordinates:(NSString * _Nonnull)customCoordinates;
/// Set an array of transformations to create for the uploaded resource during the upload process, instead of lazily creating each of them when first accessed by your site’s visitors.
/// \param eager The array of transformations (CLDTransformation|CLDEagerTransformation)
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setEagerFromTransformationArray:(NSArray<CLDTransformation *> * _Nonnull)eager;
/// Set an array of transformations to create for the uploaded resource during the upload process, instead of lazily creating each of them when first accessed by your site’s visitors.
/// \param eager The array of transformations.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setEager:(NSString * _Nonnull)eager;
/// Override quality settings for the resource
/// \param quality The quality configuration instance, see CLDQuality.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setQualityOverrideFromQuality:(CLDQuality * _Nonnull)quality;
/// Override quality settings for the resource
/// \param quality The quality as a string.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setQualityOverrideFromString:(NSString * _Nonnull)quality;
/// Allows modification on upload parameters by specifying custom logic with JavaScript code that is evaluated when uploading a file.
/// For more information see the <a href="https://cloudinary.com/documentation/analysis_on_upload#evaluating_and_modifying_upload_parameters">documentation</a>.
/// \param eval The java script code to assign to the uploaded asset.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setEvalFromString:(NSString * _Nonnull)eval;
/// Set an array of headers lines for returning as response HTTP headers when delivering the uploaded resource to your users.
/// Supported headers: <code>Link, X-Robots-Tag</code>.
/// For example: <code>X-Robots-Tag: noindex</code>.
/// \param headers The array of headers.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setHeadersWithDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)headers;
/// Set an array of headers lines for returning as response HTTP headers when delivering the uploaded resource to your users.
/// Supported headers: <code>Link, X-Robots-Tag</code>.
/// For example: <code>X-Robots-Tag: noindex</code>.
/// \param headers The array of headers.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setHeaders:(NSString * _Nonnull)headers;
/// Requests that Cloudinary automatically find the best breakpoints, using an array of CLDResponsiveBreakpoints objects.
/// \param responsiveBreakpoints The array of responsive breakpoints setting.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setResponsiveBreakpoints:(NSArray<CLDResponsiveBreakpoints *> * _Nonnull)responsiveBreakpoints;
/// Set a boolean parameter that determines whether to retrieve detected text information in the uploaded image file. default is false.
/// \param enable The boolean parameter.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setOcr:(BOOL)enable;
/// Set a boolean parameter that determines whether to retrieve detected text information in the uploaded image file. default is false.
/// \param enable The boolean parameter.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setOcrString:(NSString * _Nullable)ocrString;
@end

/// This class represents the different parameters that can be passed when performing an <code>explicit</code> request.
SWIFT_CLASS("_TtC10Cloudinary24CLDExplicitRequestParams")
@interface CLDExplicitRequestParams : CLDUploadRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDExplicitRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDExplicitRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@end

@class ResponsiveBreakpointsResult;
@class CLDInfo;
@class CLDQualityAnalysis;
@class CLDVideo;
SWIFT_CLASS("_TtC10Cloudinary15CLDUploadResult")
@interface CLDUploadResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSArray<CLDEagerResult *> * _Nullable eager;
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable resourceType;
@property (nonatomic, readonly, copy) NSString * _Nullable signature;
@property (nonatomic, readonly, copy) NSString * _Nullable createdAt;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
@property (nonatomic, readonly, strong) id _Nullable moderation;
@property (nonatomic, readonly, copy) NSArray<CLDAccessControlRule *> * _Nullable accessControl;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nullable context;
@property (nonatomic, readonly, copy) NSArray<ResponsiveBreakpointsResult *> * _Nullable responsiveBreakpoints;
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable exif;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly, strong) id _Nullable faces;
@property (nonatomic, readonly, strong) id _Nullable colors;
@property (nonatomic, readonly, copy) NSString * _Nullable phash;
@property (nonatomic, readonly, copy) NSString * _Nullable deleteToken;
@property (nonatomic, readonly, copy) NSString * _Nullable originalFilename;
@property (nonatomic, readonly, copy) NSString * _Nullable playbackUrl;
@property (nonatomic, readonly, strong) CLDInfo * _Nullable info;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable qualityAnalysis SWIFT_DEPRECATED_MSG("Use qualityAnalysisResult instead.");
@property (nonatomic, readonly, strong) CLDQualityAnalysis * _Nullable qualityAnalysisResult;
@property (nonatomic, readonly, strong) CLDVideo * _Nullable video;
@property (nonatomic, readonly, strong) CLDAudio * _Nullable audio;
@property (nonatomic, readonly, copy) NSString * _Nullable assetFolder;
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
@property (nonatomic, readonly, strong) CLDAccessibilityAnalysisResult * _Nullable accessibilityAnalysis;
@property (nonatomic, readonly, strong) CLDCoordinates * _Nullable coordinates;
@end

SWIFT_CLASS("_TtC10Cloudinary17CLDExplicitResult")
@interface CLDExplicitResult : CLDUploadResult
@end

@class CLDExplodeResult;
/// The <code>CLDExplodeRequest</code> object is returned when creating an explode request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary17CLDExplodeRequest")
@interface CLDExplodeRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDExplodeRequest.
- (CLDExplodeRequest * _Nonnull)response:(void (^ _Nullable)(CLDExplodeResult * _Nullable, NSError * _Nullable))completionHandler;
@end

/// This class represents the different parameters that can be passed when performing an <code>explode</code> request.
SWIFT_CLASS("_TtC10Cloudinary23CLDExplodeRequestParams")
@interface CLDExplodeRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDExplodeRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDExplodeRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set the specific file type of the resource.
/// \param type The specific file type of the resource.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setTypeWithType:(enum CLDType)type;
/// Set the specific file type of the resource.
/// \param type The specific file type of the resource.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setType:(NSString * _Nonnull)type;
/// Set a format to convert the images before storing them in your Cloudinary account. default is jpg.
/// \param format The format to convert to.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setFormat:(NSString * _Nonnull)format;
/// Set a boolean parameter indicating whether to perform the image generation in the background (asynchronously). default is false.
/// \param async The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setAsync:(BOOL)async;
/// Set an HTTP or HTTPS URL to notify your application (a webhook) when the process has completed.
/// \param notificationUrl The URL.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setNotificationUrl:(NSString * _Nonnull)notificationUrl;
@end

SWIFT_CLASS("_TtC10Cloudinary16CLDExplodeResult")
@interface CLDExplodeResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable status;
@property (nonatomic, readonly, copy) NSString * _Nullable batchId;
@end

SWIFT_CLASS("_TtC10Cloudinary7CLDFace")
@interface CLDFace : CLDBaseResult
@property (nonatomic, readonly, strong) CLDBoundingBox * _Nullable boundingBox;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable race;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable emotion;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable quality;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable pose;
@end

/// The <code>CLDNetworkRequest</code> protocol is returned when creating a network request using one of Cloudinary’s API calls.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_PROTOCOL("_TtP10Cloudinary17CLDNetworkRequest_")
@protocol CLDNetworkRequest
/// Resume the request.
- (void)resume;
/// Suspend the request.
- (void)suspend;
/// Cancel the request.
- (void)cancel;
@end

/// The <code>CLDNetworkDataRequest</code> protocol is returned when creating a data transfer request to Cloudinary, e.g. uploading a file.
/// It allows the options to add a progress closure that is called periodically during the transfer
/// and a response closure to be called once the transfer has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_PROTOCOL("_TtP10Cloudinary21CLDNetworkDataRequest_")
@protocol CLDNetworkDataRequest <CLDNetworkRequest>
/// Set a progress closure that is called periodically during the data transfer.
/// \param progress The closure that is called periodically during the data transfer.
///
///
/// returns:
/// The same instance of CLDNetworkDataRequest.
- (id <CLDNetworkDataRequest> _Nonnull)progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress;
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDNetworkRequest.
- (id <CLDNetworkRequest> _Nonnull)response:(void (^ _Nullable)(id _Nullable, NSError * _Nullable))completionHandler;
@end

/// The <code>CLDFetchAssetRequest</code> protocol is returned when creating a fetch asset request.
/// It allows the option to set a closure returning the fetched asset when its available.
/// The protocol also allows the options to add a progress closure that is called periodically during the download,
/// as well as cancelling the request.
SWIFT_PROTOCOL("_TtP10Cloudinary20CLDFetchAssetRequest_")
@protocol CLDFetchAssetRequest <CLDNetworkDataRequest>
/// Set a response closure to be called once the fetch asset request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the retrieved Data or the error.
///
///
/// returns:
/// The same instance of CLDFetchAssetRequest.
- (id <CLDFetchAssetRequest> _Nonnull)responseAsset:(void (^ _Nullable)(NSData * _Nullable, NSError * _Nullable))completionHandler;
@end

/// The <code>CLDFetchImageRequest</code> protocol is returned when creating a fetch image request.
/// It allows the option to set a closure returning the fetched image when its available.
/// The protocol also allows the options to add a progress closure that is called periodically during the download,
/// as well as cancelling the request.
SWIFT_PROTOCOL("_TtP10Cloudinary20CLDFetchImageRequest_")
@protocol CLDFetchImageRequest <CLDNetworkDataRequest>
/// Set a response closure to be called once the fetch image request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the retrieved UIImage or the error.
///
///
/// returns:
/// The same instance of CLDFetchImageRequest.
- (id <CLDFetchImageRequest> _Nonnull)responseImage:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completionHandler;
@end

enum LayerResourceType : NSInteger;
/// The CLDLayer is used to help adding an overlay or underlay layer to a transformation.
SWIFT_CLASS("_TtC10Cloudinary8CLDLayer")
@interface CLDLayer : NSObject
/// Initialize a CLDLayer instance.
/// -returns: The new CLDLayer instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The identifier of the image to use as a layer.
/// \param publicId The identifier of the image to use as a layer.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setPublicIdWithPublicId:(NSString * _Nonnull)publicId;
/// The format of the image to use as a layer.
/// \param format The format of the image to use as a layer.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setFormatWithFormat:(NSString * _Nonnull)format;
/// Set the layer resource type.
/// \param resourceType The layer resource type.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setResourceTypeFromLayerResourceType:(enum LayerResourceType)resourceType;
/// Set the layer resource type.
/// \param resourceType The layer resource type.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setResourceTypeFromString:(NSString * _Nonnull)resourceType;
/// Set the layer type.
/// \param type The layer type.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setTypeFromType:(enum CLDType)type;
/// Set the layer type.
/// \param rawType The layer type.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setTypeFromString:(NSString * _Nonnull)rawType;
@end

typedef SWIFT_ENUM(NSInteger, LayerResourceType, closed) {
  LayerResourceTypeImage = 0,
  LayerResourceTypeRaw = 1,
  LayerResourceTypeAuto = 2,
  LayerResourceTypeText = 3,
  LayerResourceTypeSubtitles = 4,
  LayerResourceTypeVideo = 5,
  LayerResourceTypeFetch = 6,
};

SWIFT_CLASS("_TtC10Cloudinary13CLDFetchLayer")
@interface CLDFetchLayer : CLDLayer
/// Initialize a CLDFetchLayer instance.
/// \param url The url of the remote resource to fetch
///
///
/// returns:
/// The new CLDFetchLayer instance.
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CLDFontStyle, closed) {
  CLDFontStyleNormal = 0,
  CLDFontStyleItalic = 1,
};

typedef SWIFT_ENUM(NSInteger, CLDFontWeight, closed) {
  CLDFontWeightNormal = 0,
  CLDFontWeightBold = 1,
};

SWIFT_CLASS("_TtC10Cloudinary12CLDImageInfo")
@interface CLDImageInfo : CLDBaseResult
@end

@class CLDOcrResult;
SWIFT_CLASS("_TtC10Cloudinary7CLDInfo")
@interface CLDInfo : CLDBaseResult
@property (nonatomic, readonly, strong) CLDDetection * _Nullable detection;
@property (nonatomic, readonly, strong) CLDOcrResult * _Nullable ocr;
@end

typedef SWIFT_ENUM(NSInteger, CLDLogLevel, closed) {
  CLDLogLevelTrace = 0,
  CLDLogLevelDebug = 1,
  CLDLogLevelInfo = 2,
  CLDLogLevelWarning = 3,
  CLDLogLevelError = 4,
  CLDLogLevelNone = 5,
};

@class CLDTagsRequestParams;
@class CLDTagResult;
@class CLDTagRequest;
@class CLDSpriteRequestParams;
@class CLDSpriteResult;
@class CLDSpriteRequest;
@class CLDMultiRequestParams;
@class CLDMultiResult;
@class CLDMultiRequest;
@class CLDTextRequestParams;
@class CLDTextResult;
@class CLDTextRequest;
/// The CLDManagementApi class is used to perform the available methods for managing your cloud assets.
SWIFT_CLASS("_TtC10Cloudinary16CLDManagementApi")
@interface CLDManagementApi : CLDBaseNetworkObject
/// Immediately and permanently delete assets from your Cloudinary account
/// \param publicId The identifier of the asset to remove.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDDeleteRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDDeleteRequest * _Nonnull)destroy:(NSString * _Nonnull)publicId params:(CLDDestroyRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDDeleteResult * _Nullable, NSError * _Nullable))completionHandler;
/// Add a tag to one or more assets in your cloud.
/// Tags are used to categorize and organize your images, and can also be used to apply group actions to images,
/// for example to delete images, create sprites, ZIP files, JSON lists, or animated GIFs.
/// Each image can be assigned one or more tags, which is a short name that you can dynamically use (no need to predefine tags).
/// \param tag The tag to assign.
///
/// \param publicIds An array of Public IDs of images uploaded to Cloudinary.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTagRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTagRequest * _Nonnull)addTag:(NSString * _Nonnull)tag publicIds:(NSArray<NSString *> * _Nonnull)publicIds params:(CLDTagsRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
/// Add the tags to one or more assets in your cloud.
/// Tags are used to categorize and organize your images, and can also be used to apply group actions to images,
/// for example to delete images, create sprites, ZIP files, JSON lists, or animated GIFs.
/// Each image can be assigned one or more tags, which is a short name that you can dynamically use (no need to predefine tags).
/// \param tag An array of tags to assign
///
/// \param publicIds An array of Public IDs of images uploaded to Cloudinary.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTagRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTagRequest * _Nonnull)addTags:(NSArray<NSString *> * _Nonnull)tag publicIds:(NSArray<NSString *> * _Nonnull)publicIds params:(CLDTagsRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
/// Remove a tag to one or more assets in your cloud.
/// Tags are used to categorize and organize your images, and can also be used to apply group actions to images,
/// for example to delete images, create sprites, ZIP files, JSON lists, or animated GIFs.
/// Each image can be assigned one or more tags, which is a short name that you can dynamically use (no need to predefine tags).
/// \param tag The tag to remove.
///
/// \param publicIds An array of Public IDs of images uploaded to Cloudinary.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTagRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTagRequest * _Nonnull)removeTag:(NSString * _Nonnull)tag publicIds:(NSArray<NSString *> * _Nonnull)publicIds params:(CLDTagsRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
/// Remove tags to one or more assets in your cloud.
/// Tags are used to categorize and organize your images, and can also be used to apply group actions to images,
/// for example to delete images, create sprites, ZIP files, JSON lists, or animated GIFs.
/// Each image can be assigned one or more tags, which is a short name that you can dynamically use (no need to predefine tags).
/// \param tag An array of tags to remove
///
/// \param publicIds An array of Public IDs of images uploaded to Cloudinary.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTagRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTagRequest * _Nonnull)removeTags:(NSArray<NSString *> * _Nonnull)tag publicIds:(NSArray<NSString *> * _Nonnull)publicIds params:(CLDTagsRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
/// Replaces a tag to one or more assets in your cloud.
/// Tags are used to categorize and organize your images, and can also be used to apply group actions to images,
/// for example to delete images, create sprites, ZIP files, JSON lists, or animated GIFs.
/// Each image can be assigned one or more tags, which is a short name that you can dynamically use (no need to predefine tags).
/// \param tag The tag to replace.
///
/// \param publicIds An array of Public IDs of images uploaded to Cloudinary.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTagRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTagRequest * _Nonnull)replaceTag:(NSString * _Nonnull)tag publicIds:(NSArray<NSString *> * _Nonnull)publicIds params:(CLDTagsRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
/// Replaces tags to one or more assets in your cloud.
/// Tags are used to categorize and organize your images, and can also be used to apply group actions to images,
/// for example to delete images, create sprites, ZIP files, JSON lists, or animated GIFs.
/// Each image can be assigned one or more tags, which is a short name that you can dynamically use (no need to predefine tags).
/// \param tag The array of tags to replace.
///
/// \param publicIds An array of Public IDs of images uploaded to Cloudinary.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTagRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTagRequest * _Nonnull)replaceTags:(NSArray<NSString *> * _Nonnull)tag publicIds:(NSArray<NSString *> * _Nonnull)publicIds params:(CLDTagsRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
/// The explicit method is used to apply actions to already uploaded images, i.e., to update images that have already been uploaded.
/// The most common usage of this method is to generate transformations for images that have already been uploaded,
/// either so that they do not need to be generated on the fly when first accessed by users,
/// or because Strict Transformations are enabled for your account and you cannot create transformed images on the fly (for more information, see <a href="http://cloudinary.com/documentation/upload_images#control_access_to_images">Access control to images</a>).
/// \param publicId The identifier of the uploaded asset.
///
/// \param type The specific type of the resource.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDExplicitRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDExplicitRequest * _Nonnull)explicitPublicId:(NSString * _Nonnull)publicId stringType:(NSString * _Nonnull)type params:(CLDExplicitRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDExplicitResult * _Nullable, NSError * _Nullable))completionHandler;
/// The explicit method is used to apply actions to already uploaded images, i.e., to update images that have already been uploaded.
/// The most common usage of this method is to generate transformations for images that have already been uploaded,
/// either so that they do not need to be generated on the fly when first accessed by users,
/// or because Strict Transformations are enabled for your account and you cannot create transformed images on the fly (for more information, see <a href="http://cloudinary.com/documentation/upload_images#control_access_to_images">Access control to images</a>).
/// \param publicId The identifier of the uploaded asset.
///
/// \param type The specific type of the resource.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDExplicitRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDExplicitRequest * _Nonnull)explicit:(NSString * _Nonnull)publicId type:(enum CLDType)type params:(CLDExplicitRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDExplicitResult * _Nullable, NSError * _Nullable))completionHandler;
/// The explode method creates derived images for all the individual pages in a PDF file.
/// Each derived image created is stored with the same Public ID as the PDF file,
/// and can be accessed using the page parameter for delivering an image of a specific PDF page.
/// This method is useful for pregenerating all the pages of the PDF as individual images so that they do not need to be generated on the fly when first accessed by your users.
/// \param publicId The identifier of the uploaded asset.
///
/// \param transformation A transformation to run on all the pages before storing them as derived images. This parameter is given as an array (using the SDKs) or comma-separated list          (for direct API calls) of transformations, and separated with a slash for chained transformations.
/// At minimum, you must pass the page transformation with the value all. If you supply additional transformations, you must deliver the image using the same relative order of the page and the other transformations. If you use a different order when you deliver, then it is considered a different transformation, and will be generated on-the-fly as a new derived image.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDExplodeRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDExplodeRequest * _Nonnull)explode:(NSString * _Nonnull)publicId transformation:(CLDTransformation * _Nonnull)transformation params:(CLDExplodeRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDExplodeResult * _Nullable, NSError * _Nullable))completionHandler;
/// Generate sprites by merging multiple images into a single large image for reducing network overhead and bypassing download limitations.
/// This method creates a sprite from all images that have been assigned a specified tag.
/// \param tag The sprite is created from all images with this tag.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDSpriteRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDSpriteRequest * _Nonnull)generateSprite:(NSString * _Nonnull)tag params:(CLDSpriteRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDSpriteResult * _Nullable, NSError * _Nullable))completionHandler;
/// Create a single animated GIF file from all images that have been assigned a specified tag,
/// where each image is included as a single frame of the resulting animating GIF (sorted alphabetically by their Public ID).
/// For a detailed explanation on generating animated GIFs, see the <a href="http://cloudinary.com/documentation/image_transformations#creating_animated_gifs">documentation on creating animated GIFs.</a>
/// \param tag The sprite is created from all images with this tag.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDMultiRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDMultiRequest * _Nonnull)multi:(NSString * _Nonnull)tag params:(CLDMultiRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDMultiResult * _Nullable, NSError * _Nullable))completionHandler;
/// Dynamically generate an image from a given textual string.
/// You can then use this textual image as any other image,
/// for example, as an overlay for other images. Various font,
/// color and style parameters can be specified to customize the look & feel of the text before converting it to an image.
/// \param text The text string to generate an image for.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTextRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTextRequest * _Nonnull)text:(NSString * _Nonnull)text params:(CLDTextRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTextResult * _Nullable, NSError * _Nullable))completionHandler;
/// The Cloudinary library supports using a delete token to delete images on the client-side for a limited time of 10 minutes after being uploaded.
/// After 10 minutes has passed, the image cannot be deleted from the client side, only via the Destroy method.
/// In order to also receive a deletion token in the upload response, add the return_delete_token parameter to the upload method and set it to true.
/// \param token The delete token received in the upload response, after uploading the asset using <code>return_delete_token</code> set to true.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDDeleteRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDDeleteRequest * _Nonnull)deleteByToken:(NSString * _Nonnull)token params:(CLDDeleteByTokenRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDDeleteResult * _Nullable, NSError * _Nullable))completionHandler;
@end

typedef SWIFT_ENUM(NSInteger, CLDModeration, closed) {
  CLDModerationManual = 0,
  CLDModerationWebpurify = 1,
};

/// The <code>CLDMultiRequest</code> object is returned when creating a multi request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary15CLDMultiRequest")
@interface CLDMultiRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDMultiRequest.
- (CLDMultiRequest * _Nonnull)response:(void (^ _Nullable)(CLDMultiResult * _Nullable, NSError * _Nullable))completionHandler;
@end

/// This class represents the different parameters that can be passed when performing a request to generate a multi-image.
SWIFT_CLASS("_TtC10Cloudinary21CLDMultiRequestParams")
@interface CLDMultiRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDMultiRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set a transformation to run on all the individual images before creating the sprite.
/// \param transformation The transformation to run.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)setTransformation:(CLDTransformation * _Nonnull)transformation;
/// Set a format to convert the images before storing them in your Cloudinary account. default is jpg.
/// \param format The format to convert to.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)setFormat:(NSString * _Nonnull)format;
/// Set a boolean parameter indicating whether to perform the image generation in the background (asynchronously). default is false.
/// \param async The boolean parameter.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)setAsync:(BOOL)async;
/// Set an HTTP or HTTPS URL to notify your application (a webhook) when the process has completed.
/// \param notificationUrl The URL.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)setNotificationUrl:(NSString * _Nonnull)notificationUrl;
@end

SWIFT_CLASS("_TtC10Cloudinary14CLDMultiResult")
@interface CLDMultiResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@end

/// A protocol defining the way the SDK works with its network layer, allowing the implementation of a custom network layer.
/// By default the Cloudinary SDK uses CLDNetworkDelegate() as its network adapter,
/// to use a custom network adapter you must implement the <code>CLDNetworkAdapter</code> protocol and send it when creating the CLDCloudinary instance.
SWIFT_PROTOCOL("_TtP10Cloudinary17CLDNetworkAdapter_")
@protocol CLDNetworkAdapter
/// Create a network request for the given URL, with the specified headers and body parameters.
/// \param url The URL to make the request to.
///
/// \param headers A dictionary of the headers to set to the request.
///
/// \param parameters A dictionary of the parameters to set to the request.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (id <CLDNetworkDataRequest> _Nonnull)cloudinaryRequest:(NSString * _Nonnull)url headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Create a network upload request for the given URL, with the specified headers, body parameters and data.
/// \param url The URL to make the request to.
///
/// \param headers A dictionary of the headers to set to the request.
///
/// \param parameters A dictionary of the parameters to set to the request.
///
/// \param data Can receive either the data to upload or an NSURL to either a local or a remote file to upload.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (id <CLDNetworkDataRequest> _Nonnull)uploadToCloudinary:(NSString * _Nonnull)url headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters data:(id _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Download a file from the specified url.
/// \param url The URL of the file to download.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the option to set a closure returning the fetched image when its available.
/// The protocol also allows the options to add a progress closure that is called periodically during the download,
/// as well as cancelling the request.
- (id <CLDNetworkDataRequest> _Nonnull)downloadFromCloudinary:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Set a completion handler provided by the UIApplicationDelegate <code>application:handleEventsForBackgroundURLSession:completionHandler:</code> method.
/// The handler will be called automaticaly once the session finishes its events for background URL session.
/// default is <code>nil</code>.
- (void)setBackgroundCompletionHandler:(void (^ _Nullable)(void))newValue;
/// The maximum number of queued downloads that can execute at the same time.
/// The default value of this property is NSOperationQueueDefaultMaxConcurrentOperationCount.
- (void)setMaxConcurrentDownloads:(NSInteger)maxConcurrentDownloads;
/// Get the completion handler to be called automaticaly once the session finishes its events for background URL session.
/// default is <code>nil</code>.
- (void (^ _Nullable)(void))getBackgroundCompletionHandler SWIFT_WARN_UNUSED_RESULT;
@end

@class CLDOcrBoundindBlockResult;
@class CLDOcrPropertyResult;
@class CLDOcrParagraphResult;
SWIFT_CLASS("_TtC10Cloudinary17CLDOcrBlockResult")
@interface CLDOcrBlockResult : CLDBaseResult
@property (nonatomic, readonly, strong) CLDOcrBoundindBlockResult * _Nullable boundingBox;
@property (nonatomic, readonly, strong) CLDOcrPropertyResult * _Nullable property;
@property (nonatomic, readonly, copy) NSArray<CLDOcrParagraphResult *> * _Nullable paragraphs;
@property (nonatomic, readonly, copy) NSString * _Nullable blockType;
@end

SWIFT_CLASS("_TtC10Cloudinary25CLDOcrBoundindBlockResult")
@interface CLDOcrBoundindBlockResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable vertices;
@end

@class CLDOcrTextAnnotationResult;
@class CLDOcrFullTextAnnotationResult;
SWIFT_CLASS("_TtC10Cloudinary16CLDOcrDataResult")
@interface CLDOcrDataResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSArray<CLDOcrTextAnnotationResult *> * _Nullable textAnnotations;
@property (nonatomic, readonly, strong) CLDOcrFullTextAnnotationResult * _Nullable fullTextAnnotation;
@end

SWIFT_CLASS("_TtC10Cloudinary29CLDOcrDetectedLanguagesResult")
@interface CLDOcrDetectedLanguagesResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable languageCode;
@end

@class CLDOcrPageResult;
SWIFT_CLASS("_TtC10Cloudinary30CLDOcrFullTextAnnotationResult")
@interface CLDOcrFullTextAnnotationResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSArray<CLDOcrPageResult *> * _Nullable pages;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@end

SWIFT_CLASS("_TtC10Cloudinary16CLDOcrPageResult")
@interface CLDOcrPageResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSArray<CLDOcrBlockResult *> * _Nullable blocks;
@property (nonatomic, readonly, strong) CLDOcrPropertyResult * _Nullable property;
@end

@class CLDOcrWordResult;
SWIFT_CLASS("_TtC10Cloudinary21CLDOcrParagraphResult")
@interface CLDOcrParagraphResult : CLDBaseResult
@property (nonatomic, readonly, strong) CLDOcrBoundindBlockResult * _Nullable boundingBox;
@property (nonatomic, readonly, strong) CLDOcrPropertyResult * _Nullable property;
@property (nonatomic, readonly, copy) NSArray<CLDOcrWordResult *> * _Nullable words;
@end

SWIFT_CLASS("_TtC10Cloudinary20CLDOcrPropertyResult")
@interface CLDOcrPropertyResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSArray<CLDOcrDetectedLanguagesResult *> * _Nullable detectedLanguages;
@end

SWIFT_CLASS("_TtC10Cloudinary12CLDOcrResult")
@interface CLDOcrResult : CLDBaseResult
@property (nonatomic, readonly, strong) CLDAdvOcrResult * _Nullable advOcr;
@end

SWIFT_CLASS("_TtC10Cloudinary18CLDOcrSymbolResult")
@interface CLDOcrSymbolResult : CLDBaseResult
@property (nonatomic, readonly, strong) CLDOcrBoundindBlockResult * _Nullable boundingBox;
@property (nonatomic, readonly, strong) CLDOcrPropertyResult * _Nullable property;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@end

SWIFT_CLASS("_TtC10Cloudinary26CLDOcrTextAnnotationResult")
@interface CLDOcrTextAnnotationResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable locale;
@property (nonatomic, readonly, copy) NSString * _Nullable textDescription;
@property (nonatomic, readonly, strong) CLDOcrBoundindBlockResult * _Nullable boundingBlock;
@end

SWIFT_CLASS("_TtC10Cloudinary16CLDOcrWordResult")
@interface CLDOcrWordResult : CLDBaseResult
@property (nonatomic, readonly, strong) CLDOcrBoundindBlockResult * _Nullable boundingBox;
@property (nonatomic, readonly, strong) CLDOcrPropertyResult * _Nullable property;
@property (nonatomic, readonly, copy) NSArray<CLDOcrSymbolResult *> * _Nullable symbols;
@end

SWIFT_CLASS("_TtC10Cloudinary14CLDPredominant")
@interface CLDPredominant : CLDBaseResult
@property (nonatomic, readonly, strong) id _Nullable google;
@end

SWIFT_CLASS("_TtC10Cloudinary18CLDQualityAnalysis")
@interface CLDQualityAnalysis : CLDBaseResult
@property (nonatomic, readonly, strong) NSNumber * _Nullable blockiness;
@property (nonatomic, readonly, strong) NSNumber * _Nullable chromaSubsampling;
@property (nonatomic, readonly, strong) NSNumber * _Nullable resolution;
@property (nonatomic, readonly, strong) NSNumber * _Nullable noise;
@property (nonatomic, readonly, strong) NSNumber * _Nullable colorScore;
@property (nonatomic, readonly, strong) NSNumber * _Nullable jpegChroma;
@property (nonatomic, readonly, strong) NSNumber * _Nullable dct;
@property (nonatomic, readonly, strong) NSNumber * _Nullable jpegQuality;
@property (nonatomic, readonly, strong) NSNumber * _Nullable focus;
@property (nonatomic, readonly, strong) NSNumber * _Nullable saturation;
@property (nonatomic, readonly, strong) NSNumber * _Nullable contrast;
@property (nonatomic, readonly, strong) NSNumber * _Nullable exposure;
@property (nonatomic, readonly, strong) NSNumber * _Nullable lighting;
@property (nonatomic, readonly, strong) NSNumber * _Nullable pixelScore;
@end

SWIFT_CLASS("_TtC10Cloudinary18CLDRekognitionFace")
@interface CLDRekognitionFace : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable status;
@property (nonatomic, readonly, copy) NSArray<CLDFace *> * _Nullable faces;
@end

@class CLDRenameResult;
/// The <code>CLDRenameRequest</code> object is returned when creating a rename request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary16CLDRenameRequest")
@interface CLDRenameRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDRenameRequest.
- (CLDRenameRequest * _Nonnull)response:(void (^ _Nullable)(CLDRenameResult * _Nullable, NSError * _Nullable))completionHandler;
@end

/// This class represents the different parameters that can be passed when performing a rename request.
SWIFT_CLASS("_TtC10Cloudinary22CLDRenameRequestParams")
@interface CLDRenameRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDRenameRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDRenameRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC10Cloudinary15CLDRenameResult")
@interface CLDRenameResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@property (nonatomic, readonly, copy) NSString * _Nullable resourceType;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable createdAt;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable nextCursor;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable exif;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly, strong) id _Nullable faces;
@property (nonatomic, readonly, strong) id _Nullable colors;
@property (nonatomic, readonly, strong) CLDDerived * _Nullable derived;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
@property (nonatomic, readonly, strong) id _Nullable moderation;
@property (nonatomic, readonly, strong) id _Nullable context;
@property (nonatomic, readonly, copy) NSString * _Nullable phash;
@property (nonatomic, readonly, strong) CLDPredominant * _Nullable predominant;
@property (nonatomic, readonly, strong) CLDCoordinates * _Nullable coordinates;
@property (nonatomic, readonly, strong) CLDInfo * _Nullable info;
@end

/// The CLDResponsiveBreakpoints class describe the settings available for configuring responsive breakpoints.
/// Responsive breakpoints is used to request Cloudinary to automatically find the best breakpoints.
SWIFT_CLASS("_TtC10Cloudinary24CLDResponsiveBreakpoints")
@interface CLDResponsiveBreakpoints : NSObject
/// Initializes a CLDResponsiveBreakpoints instance.
/// \param createDerived If true, create and keep the derived assets of the selected breakpoints during the API call.
/// If false, assets generated during the analysis process are thrown away.
///
///
/// returns:
/// A new CLDResponsiveBreakpoints instance.
- (nonnull instancetype)initWithCreateDerived:(BOOL)createDerived OBJC_DESIGNATED_INITIALIZER;
/// Set the base transformation to first apply to the image before finding the best breakpoints.
/// \param transformation The transformation to apply.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setTransformations:(CLDTransformation * _Nonnull)transformation SWIFT_WARN_UNUSED_RESULT;
/// Set the maximum width needed for this asset.
/// If specifying a width bigger than the original asset, the width of the original asset is used instead. default is 1000.
/// \param maxWidth The max width to set.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setMaxWidth:(NSInteger)maxWidth SWIFT_WARN_UNUSED_RESULT;
/// Set the minimum width needed for this asset. default is 50.
/// \param minWidth The min width to set.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setMinWidth:(NSInteger)minWidth SWIFT_WARN_UNUSED_RESULT;
/// Set the minimum number of bytes between two consecutive breakpoints (assets). default is 20000.
/// \param bytesStep The bytes step to set.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setBytesStep:(NSInteger)bytesStep SWIFT_WARN_UNUSED_RESULT;
/// Set the maximum number of breakpoints to find, between 3 and 200.
/// This means that there might be size differences bigger than the given bytes_step value between consecutive assets. default is 20.
/// \param maxImages The max images to set.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setMaxImages:(NSInteger)maxImages SWIFT_WARN_UNUSED_RESULT;
/// Set the format of the resulting images.
/// \param format The format to set.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setFormat:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setParam:(NSString * _Nonnull)key value:(id _Nullable)value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC10Cloudinary19CLDResponsiveParams")
@interface CLDResponsiveParams : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultStepSize;)
+ (NSInteger)defaultStepSize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultMaxDimension;)
+ (NSInteger)defaultMaxDimension SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultMinDimension;)
+ (NSInteger)defaultMinDimension SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL defaultReloadOnSizeChange;)
+ (BOOL)defaultReloadOnSizeChange SWIFT_WARN_UNUSED_RESULT;
+ (CLDResponsiveParams * _Nonnull)fit SWIFT_WARN_UNUSED_RESULT;
+ (CLDResponsiveParams * _Nonnull)autoFill SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setStepSize:(NSInteger)stepSize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setMaxDimension:(NSInteger)maxDimension SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setMinDimension:(NSInteger)minDimension SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setReloadOnSizeChange:(BOOL)reload SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImageView;
SWIFT_CLASS("_TtC10Cloudinary23CLDResponsiveViewHelper")
@interface CLDResponsiveViewHelper : NSObject
- (void)cldSetImageWithView:(UIImageView * _Nonnull)view publicId:(NSString * _Nonnull)publicId cloudinary:(CLDCloudinary * _Nonnull)cloudinary signUrl:(BOOL)signUrl resourceType:(enum CLDUrlResourceType)resourceType responsiveParams:(CLDResponsiveParams * _Nonnull)responsiveParams transformation:(CLDTransformation * _Nullable)transformation placeholder:(UIImage * _Nullable)placeholder;
- (void)onViewSizeKnownWithView:(UIImageView * _Nonnull)view;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The CLDSignature class represents a signature used to sign a URL request.
SWIFT_CLASS("_TtC10Cloudinary12CLDSignature")
@interface CLDSignature : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull signature;
@property (nonatomic, readonly, strong) NSNumber * _Nonnull timestamp;
- (nonnull instancetype)initWithSignature:(NSString * _Nonnull)signature timestamp:(NSNumber * _Nonnull)timestamp OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The <code>CLDSpriteRequest</code> object is returned when creating a sprite request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary16CLDSpriteRequest")
@interface CLDSpriteRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDSpriteRequest.
- (CLDSpriteRequest * _Nonnull)response:(void (^ _Nullable)(CLDSpriteResult * _Nullable, NSError * _Nullable))completionHandler;
@end

/// This class represents the different parameters that can be passed when performing a request to generate a sprite.
SWIFT_CLASS("_TtC10Cloudinary22CLDSpriteRequestParams")
@interface CLDSpriteRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDSpriteRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set a transformation to run on all the individual images before creating the sprite.
/// \param transformation The transformation to run.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)setTransformation:(CLDTransformation * _Nonnull)transformation;
/// Set a format to convert the images before storing them in your Cloudinary account. default is jpg.
/// \param format The format to convert to.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)setFormat:(NSString * _Nonnull)format;
/// Set a boolean parameter indicating whether to perform the image generation in the background (asynchronously). default is false.
/// \param async The boolean parameter.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)setAsync:(BOOL)async;
/// Set an HTTP or HTTPS URL to notify your application (a webhook) when the process has completed.
/// \param notificationUrl The URL.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)setNotificationUrl:(NSString * _Nonnull)notificationUrl;
@end

SWIFT_CLASS("_TtC10Cloudinary15CLDSpriteResult")
@interface CLDSpriteResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable cssUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable secureCssUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, CLDImageInfo *> * _Nullable imageInfos;
@end

SWIFT_CLASS("_TtC10Cloudinary12CLDTextLayer")
@interface CLDTextLayer : CLDLayer
/// Initialize a CLDTextLayer instance.
/// -returns: The new CLDTextLayer instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add a text caption layer.
/// \param text The text to use as a caption layer.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setTextWithText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Set the name of a font family. e.g. <code>arial</code>.
/// \param fontFamily The layer font family.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontFamilyWithFontFamily:(NSString * _Nonnull)fontFamily SWIFT_WARN_UNUSED_RESULT;
/// Set the font size in pixels. e.g. 12.
/// \param fontSize The layer font size.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontSizeFromInt:(NSInteger)fontSize SWIFT_WARN_UNUSED_RESULT;
/// Set the font size in pixels. e.g. 12.
/// \param fontSize The layer font size.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontSizeFromString:(NSString * _Nonnull)fontSize SWIFT_WARN_UNUSED_RESULT;
/// Set the font style.
/// \param fontStyle The layer font style.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontStyleFromLayerFontStyle:(enum CLDFontStyle)fontStyle SWIFT_WARN_UNUSED_RESULT;
/// Set the font style. Possible values: normal (default value) or italic. e.g., italic
/// \param fontStyle The layer font style.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontStyleFromString:(NSString * _Nonnull)fontStyle SWIFT_WARN_UNUSED_RESULT;
/// Set the text weight.
/// \param fontWeight The layer font weight.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontWeightFromLayerFontWeight:(enum CLDFontWeight)fontWeight SWIFT_WARN_UNUSED_RESULT;
/// Set the text weight. Possible values: normal (default value) or bold.
/// \param fontWeight The layer font weight.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontWeightFromString:(NSString * _Nonnull)fontWeight SWIFT_WARN_UNUSED_RESULT;
/// Set the text decoration. Possible values: none (default value), underline or strikethrough.
/// \param textDecoration The layer text Decoration.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setTextDecorationString:(NSString * _Nonnull)textDecoration SWIFT_WARN_UNUSED_RESULT;
/// Set the text alignment. Possible values: left (default value), center, right, end, start or justify.
/// \param textAlign The layer text alignment.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setTextAlignString:(NSString * _Nonnull)textAlign SWIFT_WARN_UNUSED_RESULT;
/// Set the font stroke (border).
/// Possible values: none (default value) or stroke.
/// Set the color and weight of the stroke with the border parameter.
/// \param stroke The layer text stroke.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setStrokeString:(NSString * _Nonnull)stroke SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the letters in pixels. Can be a positive or negative.
/// \param letterSpacing The layer letter Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLetterSpacingFromInt:(NSInteger)letterSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the letters in pixels. Can be a positive or negative.
/// \param letterSpacing The layer letter Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLetterSpacingFromFloat:(float)letterSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the letters in pixels. Can be a positive or negative.
/// \param letterSpacing The layer letter Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLetterSpacingString:(NSString * _Nonnull)letterSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the lines in pixels (only relevant for multi-line text). Can be a positive or negative.
/// \param lineSpacing The layer line Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLineSpacingFromInt:(NSInteger)lineSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the lines in pixels (only relevant for multi-line text). Can be a positive or negative.
/// \param lineSpacing The layer line Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLineSpacingFromFloat:(float)lineSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the lines in pixels (only relevant for multi-line text). Can be a positive or negative.
/// \param lineSpacing The layer line Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLineSpacingString:(NSString * _Nonnull)lineSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the antialiasing of the text layer rendering
/// \param antialiasing The antialiasing method
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontAntialiasingString:(NSString * _Nonnull)antialiasing SWIFT_WARN_UNUSED_RESULT;
/// Set the text rendering hinting
/// \param hinting The hinting method
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontHintingString:(NSString * _Nonnull)hinting SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC10Cloudinary17CLDSubtitlesLayer")
@interface CLDSubtitlesLayer : CLDTextLayer
/// Initialize a CLDLayer instance.
/// -returns: The new CLDLayer instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The <code>CLDTagRequest</code> object is returned when creating a tag request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary13CLDTagRequest")
@interface CLDTagRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDTagRequest.
- (CLDTagRequest * _Nonnull)response:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
@end

SWIFT_CLASS("_TtC10Cloudinary12CLDTagResult")
@interface CLDTagResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable publicIds;
@end

/// This class represents the different parameters that can be passed when performing a tag request.
SWIFT_CLASS("_TtC10Cloudinary20CLDTagsRequestParams")
@interface CLDTagsRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDTagsRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDTagsRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CLDTextDecoration, closed) {
  CLDTextDecorationNone = 0,
  CLDTextDecorationUnderline = 1,
};

/// The <code>CLDTagRequest</code> object is returned when creating a tag request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary14CLDTextRequest")
@interface CLDTextRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDTextRequest.
- (CLDTextRequest * _Nonnull)response:(void (^ _Nullable)(CLDTextResult * _Nullable, NSError * _Nullable))completionHandler;
@end

/// This class represents the different parameters that can be passed when performing a request to generate a text-image.
SWIFT_CLASS("_TtC10Cloudinary20CLDTextRequestParams")
@interface CLDTextRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDTextRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set an identifier that is used for accessing the generated image.
/// If not specified, a unique identifier is generated by Cloudinary.
/// \param publicId The identifier.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setPublicId:(NSString * _Nonnull)publicId;
/// Set a font family.
/// \param fontFamily The name of the font family.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontFamily:(NSString * _Nonnull)fontFamily;
/// Set the font size in points.
/// \param fontSize The font size in points. default is 12.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontSizeFromInt:(NSInteger)fontSize;
/// Set the font size in points.
/// \param fontSize The font size in points. default is 12.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontSize:(NSString * _Nonnull)fontSize;
/// Set the font size in points.
/// \param fontColor A name or RGB representation of the font’s color. For example: <code>red</code> or #ff0000. default is black.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontColor:(NSString * _Nonnull)fontColor;
/// Set the font weight.
/// \param fontWeight The font weight to set. default is normal.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontWeightFromFontWeight:(enum CLDFontWeight)fontWeight;
/// Set the font weight.
/// \param fontWeight The font weight to set. default is normal.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontWeight:(NSString * _Nonnull)fontWeight;
/// Set the font style.
/// \param fontStyle The font style to set. default is normal.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontStyleFromFontStyle:(enum CLDFontStyle)fontStyle;
/// Set the font style.
/// \param fontStyle The font style to set. default is normal.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontStyle:(NSString * _Nonnull)fontStyle;
/// Set the background color.
/// \param background A name or RGB representation of the background color. For example: <code>red</code> or #ff0000. default is transparent.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setBackground:(NSString * _Nonnull)background;
/// Set the text opacity level from 0 to 100.
/// \param opacity The text opacity value between 0 (invisible) and 100. default is 100.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setOpacity:(NSInteger)opacity;
/// Set a text decoration to add the the generated text, for example: underline.
/// \param textDecoration The text decoration to set. default is none.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setTextDecorationFromTextDecoration:(enum CLDTextDecoration)textDecoration;
/// Set a text decoration to add the the generated text, for example: underline.
/// \param textDecoration The text decoration to set. default is none.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setTextDecoration:(NSString * _Nonnull)textDecoration;
@end

SWIFT_CLASS("_TtC10Cloudinary13CLDTextResult")
@interface CLDTextResult : CLDBaseResult
@end

@interface CLDTransformation (SWIFT_EXTENSION(Cloudinary))
/// Deliver the image in the correct device pixel ratio, according to the used device.
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)setDprAuto;
@end

@interface CLDTransformation (SWIFT_EXTENSION(Cloudinary))
- (nonnull instancetype)ifConditionFromString:(NSString * _Nonnull)condition;
- (nonnull instancetype)ifCondition:(CLDConditionExpression * _Nonnull)condition;
- (nonnull instancetype)ifCondition:(CLDConditionExpression * _Nonnull)condition then:(CLDExpression * _Nonnull)transformation;
- (CLDConditionExpression * _Nonnull)ifCondition;
- (nonnull instancetype)ifElse;
- (nonnull instancetype)endIf;
@end

@interface CLDTransformation (SWIFT_EXTENSION(Cloudinary))
- (nonnull instancetype)setWidthWithExpression:(CLDExpression * _Nonnull)input;
- (nonnull instancetype)setHeightWithExpression:(CLDExpression * _Nonnull)input;
- (nonnull instancetype)setXFromExpression:(CLDExpression * _Nonnull)input;
- (nonnull instancetype)setYFromExpression:(CLDExpression * _Nonnull)input;
- (nonnull instancetype)setRadiusFromExpression:(CLDExpression * _Nonnull)input;
- (nonnull instancetype)setStartOffsetFromExpression:(CLDExpression * _Nonnull)input;
- (nonnull instancetype)setEndOffsetFromExpression:(CLDExpression * _Nonnull)input;
@end

typedef SWIFT_ENUM(NSInteger, CLDType, closed) {
  CLDTypeUpload = 0,
  CLDTypeFetch = 1,
  CLDTypeFacebook = 2,
  CLDTypeTwitter = 3,
  CLDTypeTwitterName = 4,
  CLDTypeSprite = 5,
  CLDTypePrivate = 6,
  CLDTypeAuthenticated = 7,
};

SWIFT_CLASS("_TtC10Cloudinary14CLDUIImageView")
@interface CLDUIImageView : UIImageView
/// Download an image asynchronously from the specified URL and set it to the UIImageView’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached. Note: this must be used on the main thread.
/// \param publicId The remote asset’s name (e.g. the public id of an uploaded image).
///
/// \param cloudinary An instance of CLDCloudinary.
///
/// \param signUrl A boolean parameter indicating whether or not to generate a signature out of the API secret and add it to the generated URL. Default is false.
///
/// \param resourceType       The resource type of the image to download (can be useful to display video frames for thumbnails). 
///
/// \param responsiveParams   An instance of CLDResponsiveParams to configure fetching a pre-scaled image to fit in the UIImageView. 
///
/// \param transformation An instance of CLDTransformation.
///
/// \param placeholder A placeholder image to be set as the background image until the asynchronus download request finishes.
///
- (void)cldSetImageWithPublicId:(NSString * _Nonnull)publicId cloudinary:(CLDCloudinary * _Nonnull)cloudinary signUrl:(BOOL)signUrl resourceType:(enum CLDUrlResourceType)resourceType responsiveParams:(CLDResponsiveParams * _Nonnull)responsiveParams transformation:(CLDTransformation * _Nullable)transformation placeholder:(UIImage * _Nullable)placeholder;
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// A <code>CLDUploadRequest</code> object is returned when creating a data transfer request to Cloudinary, e.g. uploading a file.
/// It allows the options to add a progress closure that is called periodically during the transfer
/// and a response closure to be called once the transfer has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary16CLDUploadRequest")
@interface CLDUploadRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Resume the request.
- (void)resume;
/// Suspend the request.
- (void)suspend;
/// Cancel the request.
- (void)cancel;
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDUploadRequest.
- (CLDUploadRequest * _Nonnull)responseRaw:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completionHandler;
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDUploadRequest.
- (CLDUploadRequest * _Nonnull)response:(void (^ _Nonnull)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
/// Set a progress closure that is called periodically during the data transfer.
/// \param progress The closure that is called periodically during the data transfer.
///
///
/// returns:
/// The same instance of CLDUploadRequest.
- (CLDUploadRequest * _Nonnull)progress:(void (^ _Nonnull)(NSProgress * _Nonnull))progress;
@end

SWIFT_CLASS("_TtC10Cloudinary13CLDUploadType")
@interface CLDUploadType : NSObject
/// Initializes the <code>CLDUploadType</code> instance with the specified signed and preset.
/// \param signed A boolean value specifying whether to use signed or unsigned upload.
///
/// \param preset A string represents the preset for unsigned upload requests. preset MUST be set when choosing unsigned requests.
///
///
/// returns:
/// The new <code>CLDUploadType</code> instance.
- (nonnull instancetype)initWithSigned:(BOOL)signed_ preset:(NSString * _Nullable)preset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
/// The CLDUploader class is used to upload assets to your Cloudinary account’s cloud.
SWIFT_CLASS("_TtC10Cloudinary11CLDUploader")
@interface CLDUploader : CLDBaseNetworkObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultChunkSize;)
+ (NSInteger)defaultChunkSize SWIFT_WARN_UNUSED_RESULT;
/// Uploads the given data to the configured cloud.
/// \param data The data to upload.
///
/// \param uploadPreset The upload preset to use for unsigned upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDUploadRequest * _Nonnull)uploadWithData:(NSData * _Nonnull)data uploadPreset:(NSString * _Nonnull)uploadPreset params:(CLDUploadRequestParams * _Nullable)params progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
/// Uploads a file from the specified URL to the configured cloud.
/// The URL can either be of a local file (i.e. from the bundle) or can point to a remote file.
/// \param url The URL pointing to the file to upload.
///
/// \param uploadPreset The upload preset to use for unsigned upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDUploadRequest * _Nonnull)uploadWithUrl:(NSURL * _Nonnull)url uploadPreset:(NSString * _Nonnull)uploadPreset params:(CLDUploadRequestParams * _Nullable)params progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
/// Uploads the given data to the configured cloud.
/// \param data The data to upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDUploadRequest * _Nonnull)signedUploadWithData:(NSData * _Nonnull)data params:(CLDUploadRequestParams * _Nullable)params progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
/// Uploads a file from the specified URL to the configured cloud.
/// The URL can either be of a local file (i.e. from the bundle) or can point to a remote file.
/// \param url The URL pointing to the file to upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDUploadRequest * _Nonnull)signedUploadWithUrl:(NSURL * _Nonnull)url params:(CLDUploadRequestParams * _Nullable)params progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
/// Uploads a file in chunks from the specified local-file URL to the configured cloud
/// \param url The URL pointing to the file to upload.
///
/// \param uploadPreset The upload preset to use for unsigned upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request is prepared, holding either the request object or an error
///
- (CLDUploadRequest * _Nonnull)uploadLargeWithUrl:(NSURL * _Nonnull)url uploadPreset:(NSString * _Nonnull)uploadPreset params:(CLDUploadRequestParams * _Nonnull)params chunkSize:(NSInteger)chunkSize progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
/// Uploads a file in chunks from the specified local-file URL to the configured cloud
/// \param url The URL pointing to the local file to upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request is prepared, holding either the request object or an error
///
- (CLDUploadRequest * _Nonnull)signedUploadLargeWithUrl:(NSURL * _Nonnull)url params:(CLDUploadRequestParams * _Nonnull)params chunkSize:(NSInteger)chunkSize progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
@end

@class UIViewController;
@class CLDWidgetConfiguration;
@class AVPlayerItem;
@protocol CLDUploaderWidgetDelegate;
SWIFT_CLASS("_TtC10Cloudinary17CLDUploaderWidget")
@interface CLDUploaderWidget : NSObject
@property (nonatomic, readonly, weak) UIViewController * _Null_unspecified rootViewController;
@property (nonatomic, readonly, strong) CLDCloudinary * _Nonnull cloudinaryObject;
@property (nonatomic, readonly, strong) CLDWidgetConfiguration * _Nullable configuration;
@property (nonatomic, readonly, copy) NSArray<UIImage *> * _Nonnull images;
@property (nonatomic, readonly, copy) NSArray<AVPlayerItem *> * _Nonnull videos;
@property (nonatomic, weak) id <CLDUploaderWidgetDelegate> _Nullable delegate;
/// Initializes the <code>CLDUploaderWidget</code> instance with the specified cloudinary, configuration, images and delegate.
/// \param cloudinary The CLDCloudinary object to be used for uploading the selected assets.
///
/// \param configuration The configuration used by this CLDUploaderWidget instance.
///
/// \param images The images to be presented, edited and uploaded.
///
/// \param delegate The delegate object conforming to <code>CLDUploaderWidgetDelegate</code>.
///
///
/// returns:
/// The new <code>CLDUploaderWidget</code> instance.
- (nonnull instancetype)initWithCloudinary:(CLDCloudinary * _Nonnull)cloudinary configuration:(CLDWidgetConfiguration * _Nullable)configuration images:(NSArray<UIImage *> * _Nullable)images delegate:(id <CLDUploaderWidgetDelegate> _Nullable)delegate;
/// Initializes the <code>CLDUploaderWidget</code> instance with the specified cloudinary, configuration, images, videos and delegate.
/// \param cloudinary The CLDCloudinary object to be used for uploading the selected assets.
///
/// \param configuration The configuration used by this CLDUploaderWidget instance.
///
/// \param images The images to be presented, edited and uploaded.
///
/// \param videos The videos to be presented and uploaded.
///
/// \param delegate The delegate object conforming to <code>CLDUploaderWidgetDelegate</code>.
///
///
/// returns:
/// The new <code>CLDUploaderWidget</code> instance.
- (nonnull instancetype)initWithCloudinary:(CLDCloudinary * _Nonnull)cloudinary configuration:(CLDWidgetConfiguration * _Nullable)configuration images:(NSArray<UIImage *> * _Nullable)images videos:(NSArray<AVPlayerItem *> * _Nullable)videos delegate:(id <CLDUploaderWidgetDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Sets the CLDCloudinary object to be used for uploading the selected assets
/// \param cloudinary The cloudinary object.
///
///
/// returns:
/// The same instance of CLDUploaderWidget.
- (nonnull instancetype)setCloudinaryFromCloudinary:(CLDCloudinary * _Nonnull)cloudinary;
/// Holds the configuration parameters to be used by the <code>CLDUpladerWidget</code> instance.
/// \param configuration The configuration object.
///
///
/// returns:
/// The same instance of CLDUploaderWidget.
- (nonnull instancetype)setConfigurationFromConfiguration:(CLDWidgetConfiguration * _Nonnull)configuration;
/// Sets images to be presented, edited and uploaded.
/// \param images The images array object.
///
///
/// returns:
/// The same instance of CLDUploaderWidget.
- (nonnull instancetype)setImagesFromImages:(NSArray<UIImage *> * _Nonnull)images;
/// Sets videos to be presented and uploaded.
/// \param videos The videos array object.
///
///
/// returns:
/// The same instance of CLDUploaderWidget.
- (nonnull instancetype)setVideosFromVideoItems:(NSArray<AVPlayerItem *> * _Nonnull)videoItems;
/// Sets videos to be presented and uploaded.
/// \param videos The videos array object.
///
///
/// returns:
/// The same instance of CLDUploaderWidget.
- (nonnull instancetype)setVideosFromVideoUrls:(NSArray<NSURL *> * _Nonnull)videoUrls;
/// Sets a delegate object conforming to <code>CLDUploaderWidgetDelegate</code> protocol to recieve information via delegate methods.
/// \param delegate The delegate object.
///
///
/// returns:
/// The same instance of CLDUploaderWidget.
- (nonnull instancetype)setDelegateFromDelegate:(id <CLDUploaderWidgetDelegate> _Nonnull)delegate;
/// Modally presenting the widget or an <code>UIImagePickerController</code> from the given view controller.
/// \param viewController The presenting <code>UIViewController</code> object.
///
- (void)presentWidgetFrom:(UIViewController * _Nonnull)viewController;
/// Dismisses the widget.
- (void)dismissWidget;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImagePickerController;
@interface CLDUploaderWidget (SWIFT_EXTENSION(Cloudinary)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end

SWIFT_PROTOCOL("_TtP10Cloudinary25CLDUploaderWidgetDelegate_")
@protocol CLDUploaderWidgetDelegate
/// Informs the delegate that the upload process will begin for the added requests.
/// \param widget The widget object.
///
/// \param uploadRequests The <code>CLDUploadRequest</code>s to be uploaded.
///
- (void)uploadWidget:(CLDUploaderWidget * _Nonnull)widget willCall:(NSArray<CLDUploadRequest *> * _Nonnull)uploadRequests;
/// Informs the delegate that the widget is canceled.
/// \param widget The widget object.
///
- (void)widgetDidCancel:(CLDUploaderWidget * _Nonnull)widget;
/// Informs the delegate that the widget view is dismissed.
/// \param widget The widget object.
///
- (void)uploadWidgetDidDismiss;
@end

/// The CLDUrl class represents a URL to a remote asset either on your Cloudinary cloud, or from another remote source.
SWIFT_CLASS("_TtC10Cloudinary6CLDUrl")
@interface CLDUrl : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Set the media source of the URL.
/// \param publicId the media source to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setPublicId:(NSString * _Nonnull)publicId SWIFT_WARN_UNUSED_RESULT;
/// Set the media source of the URL.
/// \param type the media source to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setTypeFromType:(enum CLDType)type SWIFT_WARN_UNUSED_RESULT;
/// Set the media source of the URL.
/// \param type the media source to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Set the resource type of the asset the URL points to.
/// \param resourceType the resource type to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setResourceTypeFromUrlResourceType:(enum CLDUrlResourceType)resourceType SWIFT_WARN_UNUSED_RESULT;
/// Set the resource type of the asset the URL points to.
/// \param resourceType the resource type to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setResourceType:(NSString * _Nonnull)resourceType SWIFT_WARN_UNUSED_RESULT;
/// Set the format of the asset the URL points to.
/// \param format the format to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setFormat:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// Set the version of the asset the URL points to.
/// \param version the version to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setVersion:(NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
/// Set the suffix of the URL. (private CDN only, image/upload and raw/upload only).
/// \param suffix the suffix to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setSuffix:(NSString * _Nonnull)suffix SWIFT_WARN_UNUSED_RESULT;
/// Set whether to use a root path instead of a full path. (image/upload only).
/// \param useRootPath Indicates whether to use a root path instead of a full path.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setUseRootPath:(BOOL)useRootPath SWIFT_WARN_UNUSED_RESULT;
/// Set whether to use a shorten URL. (image/upload only).
/// \param shortenUrl Indicates whether to use a shorten URL.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setShortenUrl:(BOOL)shortenUrl SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether to add ‘/v1/’ to the URL when the public ID includes folders and a ‘version’ value was
/// not defined.
/// When no version is explicitly specified and the public id contains folders, a default v1 version
/// is added to the url. Set this boolean as false to prevent that behaviour.
/// \param forceVersion Indicates whether to add the version.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setForceVersion:(BOOL)forceVersion SWIFT_WARN_UNUSED_RESULT;
/// Set the transformation to be apllied on the remote asset.
/// \param transformation The transformation to be apllied on the remote asset.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setTransformation:(CLDTransformation * _Nonnull)transformation;
/// Generate a string URL representation of the CLDUrl.
/// \param signUrl Indicates whether to generate a signature out of the API secret and add it to the generated URL. Default is false.
///
///
/// returns:
/// The generated string URL representation.
- (NSString * _Nullable)generateWithSignUrl:(BOOL)signUrl SWIFT_WARN_UNUSED_RESULT;
/// Generate a string URL representation of the CLDUrl.
/// \param publicId The remote asset’s name (e.g. the public id of an uploaded image).
///
/// \param signUrl Indicates whether to generate a signature out of the API secret and add it to the generated URL. Default is false.
///
///
/// returns:
/// The generated string URL representation.
- (NSString * _Nullable)generate:(NSString * _Nonnull)publicId signUrl:(BOOL)signUrl SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, CLDUrlResourceType, closed) {
  CLDUrlResourceTypeImage = 0,
  CLDUrlResourceTypeRaw = 1,
  CLDUrlResourceTypeVideo = 2,
  CLDUrlResourceTypeAuto = 3,
};

SWIFT_CLASS("_TtC10Cloudinary11CLDVariable")
@interface CLDVariable : NSObject
@property (nonatomic, copy) NSString * _Nonnull value;
@property (nonatomic, copy) NSString * _Nonnull name;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull variableNamePrefix;)
+ (NSString * _Nonnull)variableNamePrefix SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)variableName stringValue:(NSString * _Nonnull)variableValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)variableName doubleValue:(double)variableValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)variableName intValue:(NSInteger)variableValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)variableName values:(NSArray<NSString *> * _Nonnull)values OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)asString SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nonnull)asParams SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC10Cloudinary8CLDVideo")
@interface CLDVideo : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSString * _Nullable codec;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@end

SWIFT_CLASS("_TtC10Cloudinary14CLDVideoPlayer") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CLDVideoPlayer : AVPlayer
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes a CLDVideoPlayer instance, using a given AVPlayerItem.
/// \param item The player item to put into AVPlayer
///
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDVideoPlayer instance, using a given URL.
/// \param url The URL to put into AVPlayer
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDVideoPlayer instance, using a given URL.
/// \param url The string to put into AVPlayer
///
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

enum AspectRatioLockState : NSInteger;
SWIFT_CLASS("_TtC10Cloudinary22CLDWidgetConfiguration")
@interface CLDWidgetConfiguration : NSObject
@property (nonatomic) BOOL allowRotate;
@property (nonatomic) enum AspectRatioLockState initialAspectLockState;
@property (nonatomic, strong) CLDUploadType * _Nonnull uploadType;
/// Initializes the <code>CLDWidgetConfiguration</code> instance with the specified allowRotate, initialAspectLockState and uploadType.
/// \param allowRotate A boolean value specifying whether or not to allow image rotation. true by default.
///
/// \param initialAspectLockState Enum value specifying the initial aspect ratio lock state. enabledAndOn by default.
///
/// \param uploadType CLDUploadType object specifying the upload request type. signed without preset by default.
///
///
/// returns:
/// The new <code>CLDWidgetConfiguration</code> instance.
- (nonnull instancetype)initWithAllowRotate:(BOOL)allowRotate initialAspectLockState:(enum AspectRatioLockState)initialAspectLockState uploadType:(CLDUploadType * _Nonnull)uploadType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Aspect ratio lock state
/// <ul>
///   <li>
///     enabledAndOff: User can change the aspect ratio lock state - initial state is aspect ratio not locked.
///   </li>
///   <li>
///     enabledAndOn: User can change the aspect ratio lock state - initial state is aspect ratio locked.
///   </li>
///   <li>
///     disabled: Aspect ratio lock state button is removed. User will be able to change the aspect ratio of the image, but not the lock state.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AspectRatioLockState, closed) {
  AspectRatioLockStateEnabledAndOff = 0,
  AspectRatioLockStateEnabledAndOn = 1,
  AspectRatioLockStateDisabled = 2,
};

SWIFT_CLASS("_TtC10Cloudinary20ResponsiveBreakpoint")
@interface ResponsiveBreakpoint : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@end

SWIFT_CLASS("_TtC10Cloudinary27ResponsiveBreakpointsResult")
@interface ResponsiveBreakpointsResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSArray<ResponsiveBreakpoint *> * _Nullable breakpoints;
@property (nonatomic, readonly, copy) NSString * _Nullable transformation;
@end

@interface UIButton (SWIFT_EXTENSION(Cloudinary))
/// Download an image asynchronously from the specified URL and set it to the UIButton’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param url The image URL to download.
///
/// \param state The UIButton’s UIControlState state that uses the specified image.
///
/// \param placeholder A placeholder image to be set as the image untill the asynchronus download request finishes.
///
- (void)cldSetImage:(NSString * _Nonnull)url forState:(UIControlState)state cloudinary:(CLDCloudinary * _Nonnull)cloudinary placeholder:(UIImage * _Nullable)placeholder;
/// Download an image asynchronously from the specified URL and set it to the UIButton’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param publicId The remote asset’s name (e.g. the public id of an uploaded image).
///
/// \param cloudinary An instance of CLDCloudinary.
///
/// \param state The UIButton’s UIControlState state that uses the specified image.
///
/// \param signUrl A boolean parameter indicating whether or not to generate a signiture out of the API secret and add it to the generated URL. Default is false.
///
/// \param transformation An instance of CLDTransformation.
///
/// \param placeholder A placeholder image to be set as the background image untill the asynchronus download request finishes.
///
- (void)cldSetImageWithPublicId:(NSString * _Nonnull)publicId cloudinary:(CLDCloudinary * _Nonnull)cloudinary forState:(UIControlState)state signUrl:(BOOL)signUrl transformation:(CLDTransformation * _Nullable)transformation placeholder:(UIImage * _Nullable)placeholder;
/// Download an image asynchronously from the specified URL and set it to the UIButton’s background image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param url The image URL to download.
///
/// \param state The UIButton’s UIControlState state that uses the specified image.
///
/// \param placeholder A placeholder image to be set as the background image untill the asynchronus download request finishes.
///
- (void)cld_setBackgroundImage:(NSString * _Nonnull)url forState:(UIControlState)state cloudinary:(CLDCloudinary * _Nonnull)cloudinary placeholder:(UIImage * _Nullable)placeholder;
/// Download an image asynchronously from the specified URL and set it to the UIButton’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param publicId The remote asset’s name (e.g. the public id of an uploaded image).
///
/// \param cloudinary An instance of CLDCloudinary.
///
/// \param state The UIButton’s UIControlState state that uses the specified image.
///
/// \param signUrl A boolean parameter indicating whether or not to generate a signiture out of the API secret and add it to the generated URL. Default is false.
///
/// \param transformation An instance of CLDTransformation.
///
/// \param placeholder A placeholder image to be set as the background image untill the asynchronus download request finishes.
///
- (void)cld_setBackgroundImageWithPublicId:(NSString * _Nonnull)publicId cloudinary:(CLDCloudinary * _Nonnull)cloudinary forState:(UIControlState)state signUrl:(BOOL)signUrl transformation:(CLDTransformation * _Nullable)transformation placeholder:(UIImage * _Nullable)placeholder;
@end

@interface UIImageView (SWIFT_EXTENSION(Cloudinary))
/// Download an image asynchronously from the specified URL and set it to the UIImageView’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param url The image URL to download.
///
/// \param cloudinary An instance of CLDCloudinary.
///
/// \param placeholder A placeholder image to be set as the background image untill the asynchronus download request finishes.
///
- (void)cldSetImage:(NSString * _Nonnull)url cloudinary:(CLDCloudinary * _Nonnull)cloudinary placeholder:(UIImage * _Nullable)placeholder;
/// Download an image asynchronously from the specified URL and set it to the UIImageView’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param publicId The remote asset’s name (e.g. the public id of an uploaded image).
///
/// \param cloudinary An instance of CLDCloudinary.
///
/// \param signUrl A boolean parameter indicating whether or not to generate a signature out of the API secret and add it to the generated URL. Default is false.
///
/// \param resourceType       The resource type of the image to download (can be useful to display video frames for thumbnails). 
///
/// \param transformation An instance of CLDTransformation.
///
/// \param placeholder A placeholder image to be set as the background image until the asynchronus download request finishes.
///
- (void)cldSetImageWithPublicId:(NSString * _Nonnull)publicId cloudinary:(CLDCloudinary * _Nonnull)cloudinary signUrl:(BOOL)signUrl resourceType:(enum CLDUrlResourceType)resourceType transformation:(CLDTransformation * _Nullable)transformation placeholder:(UIImage * _Nullable)placeholder;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
